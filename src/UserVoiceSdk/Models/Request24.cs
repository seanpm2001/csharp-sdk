/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Request24
    /// </summary>
    [DataContract]
    public partial class Request24 :  IEquatable<Request24>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ColumnType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ColumnTypeEnum
        {
            
            /// <summary>
            /// Enum Userscount for "users_count"
            /// </summary>
            [EnumMember(Value = "users_count")]
            Userscount,
            
            /// <summary>
            /// Enum Accountscount for "accounts_count"
            /// </summary>
            [EnumMember(Value = "accounts_count")]
            Accountscount,
            
            /// <summary>
            /// Enum Mrr for "mrr"
            /// </summary>
            [EnumMember(Value = "mrr")]
            Mrr
        }


        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludesEnum
        {
            
            /// <summary>
            /// Enum Users for "users"
            /// </summary>
            [EnumMember(Value = "users")]
            Users,
            
            /// <summary>
            /// Enum Segments for "segments"
            /// </summary>
            [EnumMember(Value = "segments")]
            Segments
        }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectTypeEnum
        {
            
            /// <summary>
            /// Enum Features for "features"
            /// </summary>
            [EnumMember(Value = "features")]
            Features
        }

        /// <summary>
        /// Gets or Sets ColumnType
        /// </summary>
        [DataMember(Name="column_type", EmitDefaultValue=false)]
        public ColumnTypeEnum? ColumnType { get; set; }
        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public List<IncludesEnum> Includes { get; set; }
        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name="object_type", EmitDefaultValue=false)]
        public ObjectTypeEnum? ObjectType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Request24" /> class.
        /// </summary>
        /// <param name="ColumnType">ColumnType.</param>
        /// <param name="Includes">Includes.</param>
        /// <param name="Key">Key.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ObjectType">ObjectType.</param>
        /// <param name="SegmentId">SegmentId.</param>
        public Request24(ColumnTypeEnum? ColumnType = null, List<IncludesEnum> Includes = null, string Key = null, string Name = null, ObjectTypeEnum? ObjectType = null, long? SegmentId = null)
        {
            this.ColumnType = ColumnType;
            this.Includes = Includes;
            this.Key = Key;
            this.Name = Name;
            this.ObjectType = ObjectType;
            this.SegmentId = SegmentId;
        }
        
        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets SegmentId
        /// </summary>
        [DataMember(Name="segment_id", EmitDefaultValue=false)]
        public long? SegmentId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Request24 {\n");
            sb.Append("  ColumnType: ").Append(ColumnType).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Request24);
        }

        /// <summary>
        /// Returns true if Request24 instances are equal
        /// </summary>
        /// <param name="other">Instance of Request24 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request24 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ColumnType == other.ColumnType ||
                    this.ColumnType != null &&
                    this.ColumnType.Equals(other.ColumnType)
                ) && 
                (
                    this.Includes == other.Includes ||
                    this.Includes != null &&
                    this.Includes.SequenceEqual(other.Includes)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.ObjectType == other.ObjectType ||
                    this.ObjectType != null &&
                    this.ObjectType.Equals(other.ObjectType)
                ) && 
                (
                    this.SegmentId == other.SegmentId ||
                    this.SegmentId != null &&
                    this.SegmentId.Equals(other.SegmentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ColumnType != null)
                    hash = hash * 59 + this.ColumnType.GetHashCode();
                if (this.Includes != null)
                    hash = hash * 59 + this.Includes.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.ObjectType != null)
                    hash = hash * 59 + this.ObjectType.GetHashCode();
                if (this.SegmentId != null)
                    hash = hash * 59 + this.SegmentId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
