/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Request37
    /// </summary>
    [DataContract]
    public partial class Request37 :  IEquatable<Request37>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludesEnum
        {
            
            /// <summary>
            /// Enum Users for "users"
            /// </summary>
            [EnumMember(Value = "users")]
            Users,
            
            /// <summary>
            /// Enum Suggestions for "suggestions"
            /// </summary>
            [EnumMember(Value = "suggestions")]
            Suggestions,
            
            /// <summary>
            /// Enum Statuses for "statuses"
            /// </summary>
            [EnumMember(Value = "statuses")]
            Statuses
        }

        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public List<IncludesEnum> Includes { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Request37" /> class.
        /// </summary>
        /// <param name="Body">Body.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="CreatedByEmail">CreatedByEmail.</param>
        /// <param name="Includes">Includes.</param>
        /// <param name="Links">Links.</param>
        /// <param name="NotificationEmailAddress">NotificationEmailAddress.</param>
        /// <param name="NotifySupporters">NotifySupporters (default to false).</param>
        public Request37(string Body = null, DateTime? CreatedAt = null, string CreatedByEmail = null, List<IncludesEnum> Includes = null, AdminstatusUpdatesLinks Links = null, string NotificationEmailAddress = null, bool? NotifySupporters = null)
        {
            this.Body = Body;
            this.CreatedAt = CreatedAt;
            this.CreatedByEmail = CreatedByEmail;
            this.Includes = Includes;
            this.Links = Links;
            this.NotificationEmailAddress = NotificationEmailAddress;
            // use default value if no "NotifySupporters" provided
            if (NotifySupporters == null)
            {
                this.NotifySupporters = false;
            }
            else
            {
                this.NotifySupporters = NotifySupporters;
            }
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets CreatedByEmail
        /// </summary>
        [DataMember(Name="created_by_email", EmitDefaultValue=false)]
        public string CreatedByEmail { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public AdminstatusUpdatesLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets NotificationEmailAddress
        /// </summary>
        [DataMember(Name="notification_email_address", EmitDefaultValue=false)]
        public string NotificationEmailAddress { get; set; }
        /// <summary>
        /// Gets or Sets NotifySupporters
        /// </summary>
        [DataMember(Name="notify_supporters", EmitDefaultValue=false)]
        public bool? NotifySupporters { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Request37 {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CreatedByEmail: ").Append(CreatedByEmail).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  NotificationEmailAddress: ").Append(NotificationEmailAddress).Append("\n");
            sb.Append("  NotifySupporters: ").Append(NotifySupporters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Request37);
        }

        /// <summary>
        /// Returns true if Request37 instances are equal
        /// </summary>
        /// <param name="other">Instance of Request37 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request37 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.CreatedByEmail == other.CreatedByEmail ||
                    this.CreatedByEmail != null &&
                    this.CreatedByEmail.Equals(other.CreatedByEmail)
                ) && 
                (
                    this.Includes == other.Includes ||
                    this.Includes != null &&
                    this.Includes.SequenceEqual(other.Includes)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.NotificationEmailAddress == other.NotificationEmailAddress ||
                    this.NotificationEmailAddress != null &&
                    this.NotificationEmailAddress.Equals(other.NotificationEmailAddress)
                ) && 
                (
                    this.NotifySupporters == other.NotifySupporters ||
                    this.NotifySupporters != null &&
                    this.NotifySupporters.Equals(other.NotifySupporters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.CreatedByEmail != null)
                    hash = hash * 59 + this.CreatedByEmail.GetHashCode();
                if (this.Includes != null)
                    hash = hash * 59 + this.Includes.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.NotificationEmailAddress != null)
                    hash = hash * 59 + this.NotificationEmailAddress.GetHashCode();
                if (this.NotifySupporters != null)
                    hash = hash * 59 + this.NotifySupporters.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
