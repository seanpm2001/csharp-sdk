/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Import
    /// </summary>
    [DataContract]
    public partial class Import :  IEquatable<Import>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Import" /> class.
        /// </summary>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="Id">Id.</param>
        /// <param name="ImportCompletedAt">ImportCompletedAt.</param>
        /// <param name="ImportStartedAt">ImportStartedAt.</param>
        /// <param name="ImportedRecords">ImportedRecords.</param>
        /// <param name="Links">Links.</param>
        /// <param name="ProcessedRows">ProcessedRows.</param>
        /// <param name="State">State.</param>
        /// <param name="TotalRows">TotalRows.</param>
        /// <param name="Type">Type.</param>
        public Import(DateTime? CreatedAt = null, long? Id = null, DateTime? ImportCompletedAt = null, DateTime? ImportStartedAt = null, long? ImportedRecords = null, AdminnpsRatingsLinks Links = null, long? ProcessedRows = null, string State = null, long? TotalRows = null, string Type = null)
        {
            this.CreatedAt = CreatedAt;
            this.Id = Id;
            this.ImportCompletedAt = ImportCompletedAt;
            this.ImportStartedAt = ImportStartedAt;
            this.ImportedRecords = ImportedRecords;
            this.Links = Links;
            this.ProcessedRows = ProcessedRows;
            this.State = State;
            this.TotalRows = TotalRows;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets ImportCompletedAt
        /// </summary>
        [DataMember(Name="import_completed_at", EmitDefaultValue=false)]
        public DateTime? ImportCompletedAt { get; set; }
        /// <summary>
        /// Gets or Sets ImportStartedAt
        /// </summary>
        [DataMember(Name="import_started_at", EmitDefaultValue=false)]
        public DateTime? ImportStartedAt { get; set; }
        /// <summary>
        /// Gets or Sets ImportedRecords
        /// </summary>
        [DataMember(Name="imported_records", EmitDefaultValue=false)]
        public long? ImportedRecords { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public AdminnpsRatingsLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets ProcessedRows
        /// </summary>
        [DataMember(Name="processed_rows", EmitDefaultValue=false)]
        public long? ProcessedRows { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Gets or Sets TotalRows
        /// </summary>
        [DataMember(Name="total_rows", EmitDefaultValue=false)]
        public long? TotalRows { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Import {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImportCompletedAt: ").Append(ImportCompletedAt).Append("\n");
            sb.Append("  ImportStartedAt: ").Append(ImportStartedAt).Append("\n");
            sb.Append("  ImportedRecords: ").Append(ImportedRecords).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ProcessedRows: ").Append(ProcessedRows).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TotalRows: ").Append(TotalRows).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Import);
        }

        /// <summary>
        /// Returns true if Import instances are equal
        /// </summary>
        /// <param name="other">Instance of Import to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Import other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ImportCompletedAt == other.ImportCompletedAt ||
                    this.ImportCompletedAt != null &&
                    this.ImportCompletedAt.Equals(other.ImportCompletedAt)
                ) && 
                (
                    this.ImportStartedAt == other.ImportStartedAt ||
                    this.ImportStartedAt != null &&
                    this.ImportStartedAt.Equals(other.ImportStartedAt)
                ) && 
                (
                    this.ImportedRecords == other.ImportedRecords ||
                    this.ImportedRecords != null &&
                    this.ImportedRecords.Equals(other.ImportedRecords)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.ProcessedRows == other.ProcessedRows ||
                    this.ProcessedRows != null &&
                    this.ProcessedRows.Equals(other.ProcessedRows)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.TotalRows == other.TotalRows ||
                    this.TotalRows != null &&
                    this.TotalRows.Equals(other.TotalRows)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ImportCompletedAt != null)
                    hash = hash * 59 + this.ImportCompletedAt.GetHashCode();
                if (this.ImportStartedAt != null)
                    hash = hash * 59 + this.ImportStartedAt.GetHashCode();
                if (this.ImportedRecords != null)
                    hash = hash * 59 + this.ImportedRecords.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.ProcessedRows != null)
                    hash = hash * 59 + this.ProcessedRows.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.TotalRows != null)
                    hash = hash * 59 + this.TotalRows.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
