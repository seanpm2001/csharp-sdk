/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// AdminbulkIdentifyAccount
    /// </summary>
    [DataContract]
    public partial class AdminbulkIdentifyAccount :  IEquatable<AdminbulkIdentifyAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminbulkIdentifyAccount" /> class.
        /// </summary>
        /// <param name="CreatedAt">unix timestamp for the date the account was created.</param>
        /// <param name="Id">external identifier for this user’s account.</param>
        /// <param name="Ltv">decimal; lifetime value of the account.</param>
        /// <param name="MonthlyRate">decimal; monthly rate of the account.</param>
        /// <param name="Name">account name.</param>
        /// <param name="Plan">plan name for the account.</param>
        public AdminbulkIdentifyAccount(long? CreatedAt = null, string Id = null, double? Ltv = null, double? MonthlyRate = null, string Name = null, string Plan = null)
        {
            this.CreatedAt = CreatedAt;
            this.Id = Id;
            this.Ltv = Ltv;
            this.MonthlyRate = MonthlyRate;
            this.Name = Name;
            this.Plan = Plan;
        }
        
        /// <summary>
        /// unix timestamp for the date the account was created
        /// </summary>
        /// <value>unix timestamp for the date the account was created</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public long? CreatedAt { get; set; }
        /// <summary>
        /// external identifier for this user’s account
        /// </summary>
        /// <value>external identifier for this user’s account</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// decimal; lifetime value of the account
        /// </summary>
        /// <value>decimal; lifetime value of the account</value>
        [DataMember(Name="ltv", EmitDefaultValue=false)]
        public double? Ltv { get; set; }
        /// <summary>
        /// decimal; monthly rate of the account
        /// </summary>
        /// <value>decimal; monthly rate of the account</value>
        [DataMember(Name="monthly_rate", EmitDefaultValue=false)]
        public double? MonthlyRate { get; set; }
        /// <summary>
        /// account name
        /// </summary>
        /// <value>account name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// plan name for the account
        /// </summary>
        /// <value>plan name for the account</value>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public string Plan { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminbulkIdentifyAccount {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ltv: ").Append(Ltv).Append("\n");
            sb.Append("  MonthlyRate: ").Append(MonthlyRate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminbulkIdentifyAccount);
        }

        /// <summary>
        /// Returns true if AdminbulkIdentifyAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminbulkIdentifyAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminbulkIdentifyAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Ltv == other.Ltv ||
                    this.Ltv != null &&
                    this.Ltv.Equals(other.Ltv)
                ) && 
                (
                    this.MonthlyRate == other.MonthlyRate ||
                    this.MonthlyRate != null &&
                    this.MonthlyRate.Equals(other.MonthlyRate)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Plan == other.Plan ||
                    this.Plan != null &&
                    this.Plan.Equals(other.Plan)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Ltv != null)
                    hash = hash * 59 + this.Ltv.GetHashCode();
                if (this.MonthlyRate != null)
                    hash = hash * 59 + this.MonthlyRate.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Plan != null)
                    hash = hash * 59 + this.Plan.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
