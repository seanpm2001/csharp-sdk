/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// UserTraits
    /// </summary>
    [DataContract]
    public partial class UserTraits :  IEquatable<UserTraits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTraits" /> class.
        /// </summary>
        /// <param name="AccountCreatedAt">AccountCreatedAt.</param>
        /// <param name="AccountId">AccountId.</param>
        /// <param name="AccountInternalId">AccountInternalId.</param>
        /// <param name="AccountLtv">AccountLtv.</param>
        /// <param name="AccountMonthlyRate">AccountMonthlyRate.</param>
        /// <param name="AccountName">AccountName.</param>
        /// <param name="AccountPlan">AccountPlan.</param>
        /// <param name="BrowserName">BrowserName.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Ip">Ip.</param>
        /// <param name="LocationCity">LocationCity.</param>
        /// <param name="LocationCountry">LocationCountry.</param>
        /// <param name="LocationRegion">LocationRegion.</param>
        /// <param name="Name">Name.</param>
        /// <param name="OsName">OsName.</param>
        /// <param name="Type">Type.</param>
        public UserTraits(long? AccountCreatedAt = null, string AccountId = null, long? AccountInternalId = null, decimal? AccountLtv = null, decimal? AccountMonthlyRate = null, string AccountName = null, string AccountPlan = null, string BrowserName = null, long? CreatedAt = null, string Email = null, string Id = null, string Ip = null, string LocationCity = null, string LocationCountry = null, string LocationRegion = null, string Name = null, string OsName = null, string Type = null)
        {
            this.AccountCreatedAt = AccountCreatedAt;
            this.AccountId = AccountId;
            this.AccountInternalId = AccountInternalId;
            this.AccountLtv = AccountLtv;
            this.AccountMonthlyRate = AccountMonthlyRate;
            this.AccountName = AccountName;
            this.AccountPlan = AccountPlan;
            this.BrowserName = BrowserName;
            this.CreatedAt = CreatedAt;
            this.Email = Email;
            this.Id = Id;
            this.Ip = Ip;
            this.LocationCity = LocationCity;
            this.LocationCountry = LocationCountry;
            this.LocationRegion = LocationRegion;
            this.Name = Name;
            this.OsName = OsName;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets AccountCreatedAt
        /// </summary>
        [DataMember(Name="account_created_at", EmitDefaultValue=false)]
        public long? AccountCreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public string AccountId { get; set; }
        /// <summary>
        /// Gets or Sets AccountInternalId
        /// </summary>
        [DataMember(Name="account_internal_id", EmitDefaultValue=false)]
        public long? AccountInternalId { get; set; }
        /// <summary>
        /// Gets or Sets AccountLtv
        /// </summary>
        [DataMember(Name="account_ltv", EmitDefaultValue=false)]
        public decimal? AccountLtv { get; set; }
        /// <summary>
        /// Gets or Sets AccountMonthlyRate
        /// </summary>
        [DataMember(Name="account_monthly_rate", EmitDefaultValue=false)]
        public decimal? AccountMonthlyRate { get; set; }
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }
        /// <summary>
        /// Gets or Sets AccountPlan
        /// </summary>
        [DataMember(Name="account_plan", EmitDefaultValue=false)]
        public string AccountPlan { get; set; }
        /// <summary>
        /// Gets or Sets BrowserName
        /// </summary>
        [DataMember(Name="browser_name", EmitDefaultValue=false)]
        public string BrowserName { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public long? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }
        /// <summary>
        /// Gets or Sets LocationCity
        /// </summary>
        [DataMember(Name="location_city", EmitDefaultValue=false)]
        public string LocationCity { get; set; }
        /// <summary>
        /// Gets or Sets LocationCountry
        /// </summary>
        [DataMember(Name="location_country", EmitDefaultValue=false)]
        public string LocationCountry { get; set; }
        /// <summary>
        /// Gets or Sets LocationRegion
        /// </summary>
        [DataMember(Name="location_region", EmitDefaultValue=false)]
        public string LocationRegion { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets OsName
        /// </summary>
        [DataMember(Name="os_name", EmitDefaultValue=false)]
        public string OsName { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTraits {\n");
            sb.Append("  AccountCreatedAt: ").Append(AccountCreatedAt).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  AccountInternalId: ").Append(AccountInternalId).Append("\n");
            sb.Append("  AccountLtv: ").Append(AccountLtv).Append("\n");
            sb.Append("  AccountMonthlyRate: ").Append(AccountMonthlyRate).Append("\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountPlan: ").Append(AccountPlan).Append("\n");
            sb.Append("  BrowserName: ").Append(BrowserName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  LocationCity: ").Append(LocationCity).Append("\n");
            sb.Append("  LocationCountry: ").Append(LocationCountry).Append("\n");
            sb.Append("  LocationRegion: ").Append(LocationRegion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OsName: ").Append(OsName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserTraits);
        }

        /// <summary>
        /// Returns true if UserTraits instances are equal
        /// </summary>
        /// <param name="other">Instance of UserTraits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTraits other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountCreatedAt == other.AccountCreatedAt ||
                    this.AccountCreatedAt != null &&
                    this.AccountCreatedAt.Equals(other.AccountCreatedAt)
                ) && 
                (
                    this.AccountId == other.AccountId ||
                    this.AccountId != null &&
                    this.AccountId.Equals(other.AccountId)
                ) && 
                (
                    this.AccountInternalId == other.AccountInternalId ||
                    this.AccountInternalId != null &&
                    this.AccountInternalId.Equals(other.AccountInternalId)
                ) && 
                (
                    this.AccountLtv == other.AccountLtv ||
                    this.AccountLtv != null &&
                    this.AccountLtv.Equals(other.AccountLtv)
                ) && 
                (
                    this.AccountMonthlyRate == other.AccountMonthlyRate ||
                    this.AccountMonthlyRate != null &&
                    this.AccountMonthlyRate.Equals(other.AccountMonthlyRate)
                ) && 
                (
                    this.AccountName == other.AccountName ||
                    this.AccountName != null &&
                    this.AccountName.Equals(other.AccountName)
                ) && 
                (
                    this.AccountPlan == other.AccountPlan ||
                    this.AccountPlan != null &&
                    this.AccountPlan.Equals(other.AccountPlan)
                ) && 
                (
                    this.BrowserName == other.BrowserName ||
                    this.BrowserName != null &&
                    this.BrowserName.Equals(other.BrowserName)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Ip == other.Ip ||
                    this.Ip != null &&
                    this.Ip.Equals(other.Ip)
                ) && 
                (
                    this.LocationCity == other.LocationCity ||
                    this.LocationCity != null &&
                    this.LocationCity.Equals(other.LocationCity)
                ) && 
                (
                    this.LocationCountry == other.LocationCountry ||
                    this.LocationCountry != null &&
                    this.LocationCountry.Equals(other.LocationCountry)
                ) && 
                (
                    this.LocationRegion == other.LocationRegion ||
                    this.LocationRegion != null &&
                    this.LocationRegion.Equals(other.LocationRegion)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.OsName == other.OsName ||
                    this.OsName != null &&
                    this.OsName.Equals(other.OsName)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountCreatedAt != null)
                    hash = hash * 59 + this.AccountCreatedAt.GetHashCode();
                if (this.AccountId != null)
                    hash = hash * 59 + this.AccountId.GetHashCode();
                if (this.AccountInternalId != null)
                    hash = hash * 59 + this.AccountInternalId.GetHashCode();
                if (this.AccountLtv != null)
                    hash = hash * 59 + this.AccountLtv.GetHashCode();
                if (this.AccountMonthlyRate != null)
                    hash = hash * 59 + this.AccountMonthlyRate.GetHashCode();
                if (this.AccountName != null)
                    hash = hash * 59 + this.AccountName.GetHashCode();
                if (this.AccountPlan != null)
                    hash = hash * 59 + this.AccountPlan.GetHashCode();
                if (this.BrowserName != null)
                    hash = hash * 59 + this.BrowserName.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Ip != null)
                    hash = hash * 59 + this.Ip.GetHashCode();
                if (this.LocationCity != null)
                    hash = hash * 59 + this.LocationCity.GetHashCode();
                if (this.LocationCountry != null)
                    hash = hash * 59 + this.LocationCountry.GetHashCode();
                if (this.LocationRegion != null)
                    hash = hash * 59 + this.LocationRegion.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.OsName != null)
                    hash = hash * 59 + this.OsName.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
