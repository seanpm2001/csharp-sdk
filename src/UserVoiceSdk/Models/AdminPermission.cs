/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// AdminPermission
    /// </summary>
    [DataContract]
    public partial class AdminPermission :  IEquatable<AdminPermission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminPermission" /> class.
        /// </summary>
        /// <param name="Billing">Billing.</param>
        /// <param name="Knowledgebase">Knowledgebase.</param>
        /// <param name="LicenseType">LicenseType.</param>
        /// <param name="Settings">Settings.</param>
        /// <param name="Suggestions">Suggestions.</param>
        /// <param name="Tickets">Tickets.</param>
        public AdminPermission(string Billing = null, string Knowledgebase = null, string LicenseType = null, string Settings = null, string Suggestions = null, string Tickets = null)
        {
            this.Billing = Billing;
            this.Knowledgebase = Knowledgebase;
            this.LicenseType = LicenseType;
            this.Settings = Settings;
            this.Suggestions = Suggestions;
            this.Tickets = Tickets;
        }
        
        /// <summary>
        /// Gets or Sets Billing
        /// </summary>
        [DataMember(Name="billing", EmitDefaultValue=false)]
        public string Billing { get; set; }
        /// <summary>
        /// Gets or Sets Knowledgebase
        /// </summary>
        [DataMember(Name="knowledgebase", EmitDefaultValue=false)]
        public string Knowledgebase { get; set; }
        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="license_type", EmitDefaultValue=false)]
        public string LicenseType { get; set; }
        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public string Settings { get; set; }
        /// <summary>
        /// Gets or Sets Suggestions
        /// </summary>
        [DataMember(Name="suggestions", EmitDefaultValue=false)]
        public string Suggestions { get; set; }
        /// <summary>
        /// Gets or Sets Tickets
        /// </summary>
        [DataMember(Name="tickets", EmitDefaultValue=false)]
        public string Tickets { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminPermission {\n");
            sb.Append("  Billing: ").Append(Billing).Append("\n");
            sb.Append("  Knowledgebase: ").Append(Knowledgebase).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Suggestions: ").Append(Suggestions).Append("\n");
            sb.Append("  Tickets: ").Append(Tickets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminPermission);
        }

        /// <summary>
        /// Returns true if AdminPermission instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminPermission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminPermission other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Billing == other.Billing ||
                    this.Billing != null &&
                    this.Billing.Equals(other.Billing)
                ) && 
                (
                    this.Knowledgebase == other.Knowledgebase ||
                    this.Knowledgebase != null &&
                    this.Knowledgebase.Equals(other.Knowledgebase)
                ) && 
                (
                    this.LicenseType == other.LicenseType ||
                    this.LicenseType != null &&
                    this.LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.Equals(other.Settings)
                ) && 
                (
                    this.Suggestions == other.Suggestions ||
                    this.Suggestions != null &&
                    this.Suggestions.Equals(other.Suggestions)
                ) && 
                (
                    this.Tickets == other.Tickets ||
                    this.Tickets != null &&
                    this.Tickets.Equals(other.Tickets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Billing != null)
                    hash = hash * 59 + this.Billing.GetHashCode();
                if (this.Knowledgebase != null)
                    hash = hash * 59 + this.Knowledgebase.GetHashCode();
                if (this.LicenseType != null)
                    hash = hash * 59 + this.LicenseType.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Suggestions != null)
                    hash = hash * 59 + this.Suggestions.GetHashCode();
                if (this.Tickets != null)
                    hash = hash * 59 + this.Tickets.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
