/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Supports arbitrary key-values, like custom fields
    /// </summary>
    [DataContract]
    public partial class RequestExternalAccount : Dictionary<String, string>,  IEquatable<RequestExternalAccount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestExternalAccount" /> class.
        /// </summary>
        /// <param name="ExternalCreatedAt">Date account was created in your system. Expected format: 2017-01-01T01:00:00Z.</param>
        /// <param name="ExternalId">Account ID in your system..</param>
        /// <param name="Ltv">Ltv.</param>
        /// <param name="LtvCents">LtvCents.</param>
        /// <param name="Mrr">Mrr.</param>
        /// <param name="MrrCents">MrrCents.</param>
        /// <param name="Name">Account name in your system. Recommended length: 128 or fewer characters..</param>
        /// <param name="Plan">Plan name of account. Recommended length: 128 or fewer characters..</param>
        public RequestExternalAccount(DateTime? ExternalCreatedAt = null, string ExternalId = null, double? Ltv = null, long? LtvCents = null, double? Mrr = null, long? MrrCents = null, string Name = null, string Plan = null)
        {
            this.ExternalCreatedAt = ExternalCreatedAt;
            this.ExternalId = ExternalId;
            this.Ltv = Ltv;
            this.LtvCents = LtvCents;
            this.Mrr = Mrr;
            this.MrrCents = MrrCents;
            this.Name = Name;
            this.Plan = Plan;
        }
        
        /// <summary>
        /// Date account was created in your system. Expected format: 2017-01-01T01:00:00Z
        /// </summary>
        /// <value>Date account was created in your system. Expected format: 2017-01-01T01:00:00Z</value>
        [DataMember(Name="external_created_at", EmitDefaultValue=false)]
        public DateTime? ExternalCreatedAt { get; set; }
        /// <summary>
        /// Account ID in your system.
        /// </summary>
        /// <value>Account ID in your system.</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }
        /// <summary>
        /// Gets or Sets Ltv
        /// </summary>
        [DataMember(Name="ltv", EmitDefaultValue=false)]
        public double? Ltv { get; set; }
        /// <summary>
        /// Gets or Sets LtvCents
        /// </summary>
        [DataMember(Name="ltv_cents", EmitDefaultValue=false)]
        public long? LtvCents { get; set; }
        /// <summary>
        /// Gets or Sets Mrr
        /// </summary>
        [DataMember(Name="mrr", EmitDefaultValue=false)]
        public double? Mrr { get; set; }
        /// <summary>
        /// Gets or Sets MrrCents
        /// </summary>
        [DataMember(Name="mrr_cents", EmitDefaultValue=false)]
        public long? MrrCents { get; set; }
        /// <summary>
        /// Account name in your system. Recommended length: 128 or fewer characters.
        /// </summary>
        /// <value>Account name in your system. Recommended length: 128 or fewer characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Plan name of account. Recommended length: 128 or fewer characters.
        /// </summary>
        /// <value>Plan name of account. Recommended length: 128 or fewer characters.</value>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public string Plan { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestExternalAccount {\n");
            sb.Append("  ExternalCreatedAt: ").Append(ExternalCreatedAt).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Ltv: ").Append(Ltv).Append("\n");
            sb.Append("  LtvCents: ").Append(LtvCents).Append("\n");
            sb.Append("  Mrr: ").Append(Mrr).Append("\n");
            sb.Append("  MrrCents: ").Append(MrrCents).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RequestExternalAccount);
        }

        /// <summary>
        /// Returns true if RequestExternalAccount instances are equal
        /// </summary>
        /// <param name="other">Instance of RequestExternalAccount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestExternalAccount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExternalCreatedAt == other.ExternalCreatedAt ||
                    this.ExternalCreatedAt != null &&
                    this.ExternalCreatedAt.Equals(other.ExternalCreatedAt)
                ) && 
                (
                    this.ExternalId == other.ExternalId ||
                    this.ExternalId != null &&
                    this.ExternalId.Equals(other.ExternalId)
                ) && 
                (
                    this.Ltv == other.Ltv ||
                    this.Ltv != null &&
                    this.Ltv.Equals(other.Ltv)
                ) && 
                (
                    this.LtvCents == other.LtvCents ||
                    this.LtvCents != null &&
                    this.LtvCents.Equals(other.LtvCents)
                ) && 
                (
                    this.Mrr == other.Mrr ||
                    this.Mrr != null &&
                    this.Mrr.Equals(other.Mrr)
                ) && 
                (
                    this.MrrCents == other.MrrCents ||
                    this.MrrCents != null &&
                    this.MrrCents.Equals(other.MrrCents)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Plan == other.Plan ||
                    this.Plan != null &&
                    this.Plan.Equals(other.Plan)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExternalCreatedAt != null)
                    hash = hash * 59 + this.ExternalCreatedAt.GetHashCode();
                if (this.ExternalId != null)
                    hash = hash * 59 + this.ExternalId.GetHashCode();
                if (this.Ltv != null)
                    hash = hash * 59 + this.Ltv.GetHashCode();
                if (this.LtvCents != null)
                    hash = hash * 59 + this.LtvCents.GetHashCode();
                if (this.Mrr != null)
                    hash = hash * 59 + this.Mrr.GetHashCode();
                if (this.MrrCents != null)
                    hash = hash * 59 + this.MrrCents.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Plan != null)
                    hash = hash * 59 + this.Plan.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
