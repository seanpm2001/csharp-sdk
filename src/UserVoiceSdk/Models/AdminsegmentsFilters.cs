/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// AdminsegmentsFilters
    /// </summary>
    [DataContract]
    public partial class AdminsegmentsFilters :  IEquatable<AdminsegmentsFilters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminsegmentsFilters" /> class.
        /// </summary>
        /// <param name="Column">Column.</param>
        /// <param name="Expressions">Expressions.</param>
        /// <param name="Operand">Operand.</param>
        /// <param name="_Operator">_Operator.</param>
        /// <param name="Unit">Unit.</param>
        public AdminsegmentsFilters(string Column = null, string Expressions = null, string Operand = null, string _Operator = null, string Unit = null)
        {
            this.Column = Column;
            this.Expressions = Expressions;
            this.Operand = Operand;
            this._Operator = _Operator;
            this.Unit = Unit;
        }
        
        /// <summary>
        /// Gets or Sets Column
        /// </summary>
        [DataMember(Name="column", EmitDefaultValue=false)]
        public string Column { get; set; }
        /// <summary>
        /// Gets or Sets Expressions
        /// </summary>
        [DataMember(Name="expressions", EmitDefaultValue=false)]
        public string Expressions { get; set; }
        /// <summary>
        /// Gets or Sets Operand
        /// </summary>
        [DataMember(Name="operand", EmitDefaultValue=false)]
        public string Operand { get; set; }
        /// <summary>
        /// Gets or Sets _Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string _Operator { get; set; }
        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminsegmentsFilters {\n");
            sb.Append("  Column: ").Append(Column).Append("\n");
            sb.Append("  Expressions: ").Append(Expressions).Append("\n");
            sb.Append("  Operand: ").Append(Operand).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminsegmentsFilters);
        }

        /// <summary>
        /// Returns true if AdminsegmentsFilters instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminsegmentsFilters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminsegmentsFilters other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Column == other.Column ||
                    this.Column != null &&
                    this.Column.Equals(other.Column)
                ) && 
                (
                    this.Expressions == other.Expressions ||
                    this.Expressions != null &&
                    this.Expressions.Equals(other.Expressions)
                ) && 
                (
                    this.Operand == other.Operand ||
                    this.Operand != null &&
                    this.Operand.Equals(other.Operand)
                ) && 
                (
                    this._Operator == other._Operator ||
                    this._Operator != null &&
                    this._Operator.Equals(other._Operator)
                ) && 
                (
                    this.Unit == other.Unit ||
                    this.Unit != null &&
                    this.Unit.Equals(other.Unit)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Column != null)
                    hash = hash * 59 + this.Column.GetHashCode();
                if (this.Expressions != null)
                    hash = hash * 59 + this.Expressions.GetHashCode();
                if (this.Operand != null)
                    hash = hash * 59 + this.Operand.GetHashCode();
                if (this._Operator != null)
                    hash = hash * 59 + this._Operator.GetHashCode();
                if (this.Unit != null)
                    hash = hash * 59 + this.Unit.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
