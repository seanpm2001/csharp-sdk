/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Request21
    /// </summary>
    [DataContract]
    public partial class Request21 :  IEquatable<Request21>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets BodyMimeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BodyMimeTypeEnum
        {
            
            /// <summary>
            /// Enum Html for "text/html"
            /// </summary>
            [EnumMember(Value = "text/html")]
            Html,
            
            /// <summary>
            /// Enum Plain for "text/plain"
            /// </summary>
            [EnumMember(Value = "text/plain")]
            Plain
        }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            
            /// <summary>
            /// Enum Api for "api"
            /// </summary>
            [EnumMember(Value = "api")]
            Api,
            
            /// <summary>
            /// Enum Admin for "admin"
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin,
            
            /// <summary>
            /// Enum Bookmarklet for "bookmarklet"
            /// </summary>
            [EnumMember(Value = "bookmarklet")]
            Bookmarklet,
            
            /// <summary>
            /// Enum Zendesk for "zendesk"
            /// </summary>
            [EnumMember(Value = "zendesk")]
            Zendesk
        }


        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludesEnum
        {
            
            /// <summary>
            /// Enum Supporters for "supporters"
            /// </summary>
            [EnumMember(Value = "supporters")]
            Supporters,
            
            /// <summary>
            /// Enum Suggestions for "suggestions"
            /// </summary>
            [EnumMember(Value = "suggestions")]
            Suggestions,
            
            /// <summary>
            /// Enum Forums for "forums"
            /// </summary>
            [EnumMember(Value = "forums")]
            Forums,
            
            /// <summary>
            /// Enum Tickets for "tickets"
            /// </summary>
            [EnumMember(Value = "tickets")]
            Tickets,
            
            /// <summary>
            /// Enum Users for "users"
            /// </summary>
            [EnumMember(Value = "users")]
            Users,
            
            /// <summary>
            /// Enum Statuses for "statuses"
            /// </summary>
            [EnumMember(Value = "statuses")]
            Statuses
        }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SourceTypeEnum
        {
            
            /// <summary>
            /// Enum Ticket for "zendesk_ticket"
            /// </summary>
            [EnumMember(Value = "zendesk_ticket")]
            Ticket,
            
            /// <summary>
            /// Enum User for "zendesk_user"
            /// </summary>
            [EnumMember(Value = "zendesk_user")]
            User
        }

        /// <summary>
        /// Gets or Sets BodyMimeType
        /// </summary>
        [DataMember(Name="body_mime_type", EmitDefaultValue=false)]
        public BodyMimeTypeEnum? BodyMimeType { get; set; }
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public ChannelEnum? Channel { get; set; }
        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public List<IncludesEnum> Includes { get; set; }
        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name="source_type", EmitDefaultValue=false)]
        public SourceTypeEnum? SourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Request21" /> class.
        /// </summary>
        /// <param name="Body">Body.</param>
        /// <param name="BodyMimeType">BodyMimeType (default to BodyMimeTypeEnum.Plain).</param>
        /// <param name="Channel">Channel (default to ChannelEnum.Api).</param>
        /// <param name="Includes">Includes.</param>
        /// <param name="Links">Links.</param>
        /// <param name="SendNotifications">- (default to true).</param>
        /// <param name="SourceGuid">SourceGuid.</param>
        /// <param name="SourceType">SourceType.</param>
        /// <param name="SourceUrl">SourceUrl.</param>
        /// <param name="Subscribe">Subscribe.</param>
        public Request21(string Body = null, BodyMimeTypeEnum? BodyMimeType = null, ChannelEnum? Channel = null, List<IncludesEnum> Includes = null, AdminfeedbackLinks Links = null, bool? SendNotifications = null, string SourceGuid = null, SourceTypeEnum? SourceType = null, string SourceUrl = null, bool? Subscribe = null)
        {
            this.Body = Body;
            // use default value if no "BodyMimeType" provided
            if (BodyMimeType == null)
            {
                this.BodyMimeType = BodyMimeTypeEnum.Plain;
            }
            else
            {
                this.BodyMimeType = BodyMimeType;
            }
            // use default value if no "Channel" provided
            if (Channel == null)
            {
                this.Channel = ChannelEnum.Api;
            }
            else
            {
                this.Channel = Channel;
            }
            this.Includes = Includes;
            this.Links = Links;
            // use default value if no "SendNotifications" provided
            if (SendNotifications == null)
            {
                this.SendNotifications = true;
            }
            else
            {
                this.SendNotifications = SendNotifications;
            }
            this.SourceGuid = SourceGuid;
            this.SourceType = SourceType;
            this.SourceUrl = SourceUrl;
            this.Subscribe = Subscribe;
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public AdminfeedbackLinks Links { get; set; }
        /// <summary>
        /// -
        /// </summary>
        /// <value>-</value>
        [DataMember(Name="send_notifications", EmitDefaultValue=false)]
        public bool? SendNotifications { get; set; }
        /// <summary>
        /// Gets or Sets SourceGuid
        /// </summary>
        [DataMember(Name="source_guid", EmitDefaultValue=false)]
        public string SourceGuid { get; set; }
        /// <summary>
        /// Gets or Sets SourceUrl
        /// </summary>
        [DataMember(Name="source_url", EmitDefaultValue=false)]
        public string SourceUrl { get; set; }
        /// <summary>
        /// Gets or Sets Subscribe
        /// </summary>
        [DataMember(Name="subscribe", EmitDefaultValue=false)]
        public bool? Subscribe { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Request21 {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BodyMimeType: ").Append(BodyMimeType).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  SendNotifications: ").Append(SendNotifications).Append("\n");
            sb.Append("  SourceGuid: ").Append(SourceGuid).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  Subscribe: ").Append(Subscribe).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Request21);
        }

        /// <summary>
        /// Returns true if Request21 instances are equal
        /// </summary>
        /// <param name="other">Instance of Request21 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request21 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.BodyMimeType == other.BodyMimeType ||
                    this.BodyMimeType != null &&
                    this.BodyMimeType.Equals(other.BodyMimeType)
                ) && 
                (
                    this.Channel == other.Channel ||
                    this.Channel != null &&
                    this.Channel.Equals(other.Channel)
                ) && 
                (
                    this.Includes == other.Includes ||
                    this.Includes != null &&
                    this.Includes.SequenceEqual(other.Includes)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.SendNotifications == other.SendNotifications ||
                    this.SendNotifications != null &&
                    this.SendNotifications.Equals(other.SendNotifications)
                ) && 
                (
                    this.SourceGuid == other.SourceGuid ||
                    this.SourceGuid != null &&
                    this.SourceGuid.Equals(other.SourceGuid)
                ) && 
                (
                    this.SourceType == other.SourceType ||
                    this.SourceType != null &&
                    this.SourceType.Equals(other.SourceType)
                ) && 
                (
                    this.SourceUrl == other.SourceUrl ||
                    this.SourceUrl != null &&
                    this.SourceUrl.Equals(other.SourceUrl)
                ) && 
                (
                    this.Subscribe == other.Subscribe ||
                    this.Subscribe != null &&
                    this.Subscribe.Equals(other.Subscribe)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                if (this.BodyMimeType != null)
                    hash = hash * 59 + this.BodyMimeType.GetHashCode();
                if (this.Channel != null)
                    hash = hash * 59 + this.Channel.GetHashCode();
                if (this.Includes != null)
                    hash = hash * 59 + this.Includes.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.SendNotifications != null)
                    hash = hash * 59 + this.SendNotifications.GetHashCode();
                if (this.SourceGuid != null)
                    hash = hash * 59 + this.SourceGuid.GetHashCode();
                if (this.SourceType != null)
                    hash = hash * 59 + this.SourceType.GetHashCode();
                if (this.SourceUrl != null)
                    hash = hash * 59 + this.SourceUrl.GetHashCode();
                if (this.Subscribe != null)
                    hash = hash * 59 + this.Subscribe.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
