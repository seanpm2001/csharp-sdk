/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// NPSTraits
    /// </summary>
    [DataContract]
    public partial class NPSTraits :  IEquatable<NPSTraits>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NPSTraits" /> class.
        /// </summary>
        /// <param name="AccountName">AccountName.</param>
        /// <param name="AccountPlan">AccountPlan.</param>
        /// <param name="Activity">Activity.</param>
        /// <param name="RateType">RateType.</param>
        /// <param name="SatisfactionGroup">SatisfactionGroup.</param>
        /// <param name="Type">Type.</param>
        public NPSTraits(string AccountName = null, string AccountPlan = null, string Activity = null, string RateType = null, string SatisfactionGroup = null, string Type = null)
        {
            this.AccountName = AccountName;
            this.AccountPlan = AccountPlan;
            this.Activity = Activity;
            this.RateType = RateType;
            this.SatisfactionGroup = SatisfactionGroup;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets AccountName
        /// </summary>
        [DataMember(Name="account_name", EmitDefaultValue=false)]
        public string AccountName { get; set; }
        /// <summary>
        /// Gets or Sets AccountPlan
        /// </summary>
        [DataMember(Name="account_plan", EmitDefaultValue=false)]
        public string AccountPlan { get; set; }
        /// <summary>
        /// Gets or Sets Activity
        /// </summary>
        [DataMember(Name="activity", EmitDefaultValue=false)]
        public string Activity { get; set; }
        /// <summary>
        /// Gets or Sets RateType
        /// </summary>
        [DataMember(Name="rate_type", EmitDefaultValue=false)]
        public string RateType { get; set; }
        /// <summary>
        /// Gets or Sets SatisfactionGroup
        /// </summary>
        [DataMember(Name="satisfaction_group", EmitDefaultValue=false)]
        public string SatisfactionGroup { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NPSTraits {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountPlan: ").Append(AccountPlan).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  SatisfactionGroup: ").Append(SatisfactionGroup).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NPSTraits);
        }

        /// <summary>
        /// Returns true if NPSTraits instances are equal
        /// </summary>
        /// <param name="other">Instance of NPSTraits to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NPSTraits other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccountName == other.AccountName ||
                    this.AccountName != null &&
                    this.AccountName.Equals(other.AccountName)
                ) && 
                (
                    this.AccountPlan == other.AccountPlan ||
                    this.AccountPlan != null &&
                    this.AccountPlan.Equals(other.AccountPlan)
                ) && 
                (
                    this.Activity == other.Activity ||
                    this.Activity != null &&
                    this.Activity.Equals(other.Activity)
                ) && 
                (
                    this.RateType == other.RateType ||
                    this.RateType != null &&
                    this.RateType.Equals(other.RateType)
                ) && 
                (
                    this.SatisfactionGroup == other.SatisfactionGroup ||
                    this.SatisfactionGroup != null &&
                    this.SatisfactionGroup.Equals(other.SatisfactionGroup)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccountName != null)
                    hash = hash * 59 + this.AccountName.GetHashCode();
                if (this.AccountPlan != null)
                    hash = hash * 59 + this.AccountPlan.GetHashCode();
                if (this.Activity != null)
                    hash = hash * 59 + this.Activity.GetHashCode();
                if (this.RateType != null)
                    hash = hash * 59 + this.RateType.GetHashCode();
                if (this.SatisfactionGroup != null)
                    hash = hash * 59 + this.SatisfactionGroup.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
