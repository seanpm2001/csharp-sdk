/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// AdminbulkIdentifyIdentities
    /// </summary>
    [DataContract]
    public partial class AdminbulkIdentifyIdentities :  IEquatable<AdminbulkIdentifyIdentities>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminbulkIdentifyIdentities" /> class.
        /// </summary>
        /// <param name="Account">Account.</param>
        /// <param name="CreatedAt">unix timestamp for the date the user signed up.</param>
        /// <param name="Email">required to match a user in the UserVoice database.</param>
        /// <param name="Id">external identifier for this user.</param>
        /// <param name="Name">user’s real name.</param>
        /// <param name="Type">used for segmenting users by type.</param>
        public AdminbulkIdentifyIdentities(AdminbulkIdentifyAccount Account = null, long? CreatedAt = null, string Email = null, string Id = null, string Name = null, string Type = null)
        {
            this.Account = Account;
            this.CreatedAt = CreatedAt;
            this.Email = Email;
            this.Id = Id;
            this.Name = Name;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public AdminbulkIdentifyAccount Account { get; set; }
        /// <summary>
        /// unix timestamp for the date the user signed up
        /// </summary>
        /// <value>unix timestamp for the date the user signed up</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public long? CreatedAt { get; set; }
        /// <summary>
        /// required to match a user in the UserVoice database
        /// </summary>
        /// <value>required to match a user in the UserVoice database</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// external identifier for this user
        /// </summary>
        /// <value>external identifier for this user</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// user’s real name
        /// </summary>
        /// <value>user’s real name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// used for segmenting users by type
        /// </summary>
        /// <value>used for segmenting users by type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminbulkIdentifyIdentities {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminbulkIdentifyIdentities);
        }

        /// <summary>
        /// Returns true if AdminbulkIdentifyIdentities instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminbulkIdentifyIdentities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminbulkIdentifyIdentities other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Account == other.Account ||
                    this.Account != null &&
                    this.Account.Equals(other.Account)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Account != null)
                    hash = hash * 59 + this.Account.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
