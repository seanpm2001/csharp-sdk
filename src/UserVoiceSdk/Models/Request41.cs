/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Request41
    /// </summary>
    [DataContract]
    public partial class Request41 :  IEquatable<Request41>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets BodyMimeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BodyMimeTypeEnum
        {
            
            /// <summary>
            /// Enum Plain for "text/plain"
            /// </summary>
            [EnumMember(Value = "text/plain")]
            Plain
        }


        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IncludesEnum
        {
            
            /// <summary>
            /// Enum Labels for "labels"
            /// </summary>
            [EnumMember(Value = "labels")]
            Labels,
            
            /// <summary>
            /// Enum Forums for "forums"
            /// </summary>
            [EnumMember(Value = "forums")]
            Forums,
            
            /// <summary>
            /// Enum Statusupdates for "status_updates"
            /// </summary>
            [EnumMember(Value = "status_updates")]
            Statusupdates,
            
            /// <summary>
            /// Enum Tickets for "tickets"
            /// </summary>
            [EnumMember(Value = "tickets")]
            Tickets,
            
            /// <summary>
            /// Enum Users for "users"
            /// </summary>
            [EnumMember(Value = "users")]
            Users,
            
            /// <summary>
            /// Enum Statuses for "statuses"
            /// </summary>
            [EnumMember(Value = "statuses")]
            Statuses,
            
            /// <summary>
            /// Enum Categories for "categories"
            /// </summary>
            [EnumMember(Value = "categories")]
            Categories,
            
            /// <summary>
            /// Enum Npsratings for "nps_ratings"
            /// </summary>
            [EnumMember(Value = "nps_ratings")]
            Npsratings,
            
            /// <summary>
            /// Enum Parentsuggestions for "parent_suggestions"
            /// </summary>
            [EnumMember(Value = "parent_suggestions")]
            Parentsuggestions
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum New for "new"
            /// </summary>
            [EnumMember(Value = "new")]
            New,
            
            /// <summary>
            /// Enum Approved for "approved"
            /// </summary>
            [EnumMember(Value = "approved")]
            Approved,
            
            /// <summary>
            /// Enum Published for "published"
            /// </summary>
            [EnumMember(Value = "published")]
            Published
        }

        /// <summary>
        /// Gets or Sets BodyMimeType
        /// </summary>
        [DataMember(Name="body_mime_type", EmitDefaultValue=false)]
        public BodyMimeTypeEnum? BodyMimeType { get; set; }
        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public List<IncludesEnum> Includes { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Request41" /> class.
        /// </summary>
        /// <param name="AttachmentTokens">AttachmentTokens.</param>
        /// <param name="Body">Body.</param>
        /// <param name="BodyMimeType">BodyMimeType (default to BodyMimeTypeEnum.Plain).</param>
        /// <param name="CategoryName">CategoryName.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="ForumName">ForumName.</param>
        /// <param name="Includes">Includes.</param>
        /// <param name="Labels">-.</param>
        /// <param name="Links">Links.</param>
        /// <param name="State">State (default to StateEnum.Published).</param>
        /// <param name="StatusName">-.</param>
        /// <param name="StatusUpdateBody">StatusUpdateBody.</param>
        /// <param name="StatusUpdateCreatedAt">StatusUpdateCreatedAt.</param>
        /// <param name="StatusUpdateCreatedByEmail">StatusUpdateCreatedByEmail.</param>
        /// <param name="Title">Title.</param>
        /// <param name="UserEmail">UserEmail.</param>
        /// <param name="UserName">UserName.</param>
        public Request41(string AttachmentTokens = null, string Body = null, BodyMimeTypeEnum? BodyMimeType = null, string CategoryName = null, DateTime? CreatedAt = null, string ForumName = null, List<IncludesEnum> Includes = null, string Labels = null, AdminsuggestionsimportLinks Links = null, StateEnum? State = null, string StatusName = null, string StatusUpdateBody = null, DateTime? StatusUpdateCreatedAt = null, string StatusUpdateCreatedByEmail = null, string Title = null, string UserEmail = null, string UserName = null)
        {
            this.AttachmentTokens = AttachmentTokens;
            this.Body = Body;
            // use default value if no "BodyMimeType" provided
            if (BodyMimeType == null)
            {
                this.BodyMimeType = BodyMimeTypeEnum.Plain;
            }
            else
            {
                this.BodyMimeType = BodyMimeType;
            }
            this.CategoryName = CategoryName;
            this.CreatedAt = CreatedAt;
            this.ForumName = ForumName;
            this.Includes = Includes;
            this.Labels = Labels;
            this.Links = Links;
            // use default value if no "State" provided
            if (State == null)
            {
                this.State = StateEnum.Published;
            }
            else
            {
                this.State = State;
            }
            this.StatusName = StatusName;
            this.StatusUpdateBody = StatusUpdateBody;
            this.StatusUpdateCreatedAt = StatusUpdateCreatedAt;
            this.StatusUpdateCreatedByEmail = StatusUpdateCreatedByEmail;
            this.Title = Title;
            this.UserEmail = UserEmail;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// Gets or Sets AttachmentTokens
        /// </summary>
        [DataMember(Name="attachment_tokens", EmitDefaultValue=false)]
        public string AttachmentTokens { get; set; }
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets CategoryName
        /// </summary>
        [DataMember(Name="category_name", EmitDefaultValue=false)]
        public string CategoryName { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets ForumName
        /// </summary>
        [DataMember(Name="forum_name", EmitDefaultValue=false)]
        public string ForumName { get; set; }
        /// <summary>
        /// -
        /// </summary>
        /// <value>-</value>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public string Labels { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public AdminsuggestionsimportLinks Links { get; set; }
        /// <summary>
        /// -
        /// </summary>
        /// <value>-</value>
        [DataMember(Name="status_name", EmitDefaultValue=false)]
        public string StatusName { get; set; }
        /// <summary>
        /// Gets or Sets StatusUpdateBody
        /// </summary>
        [DataMember(Name="status_update_body", EmitDefaultValue=false)]
        public string StatusUpdateBody { get; set; }
        /// <summary>
        /// Gets or Sets StatusUpdateCreatedAt
        /// </summary>
        [DataMember(Name="status_update_created_at", EmitDefaultValue=false)]
        public DateTime? StatusUpdateCreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets StatusUpdateCreatedByEmail
        /// </summary>
        [DataMember(Name="status_update_created_by_email", EmitDefaultValue=false)]
        public string StatusUpdateCreatedByEmail { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets UserEmail
        /// </summary>
        [DataMember(Name="user_email", EmitDefaultValue=false)]
        public string UserEmail { get; set; }
        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Request41 {\n");
            sb.Append("  AttachmentTokens: ").Append(AttachmentTokens).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  BodyMimeType: ").Append(BodyMimeType).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ForumName: ").Append(ForumName).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StatusName: ").Append(StatusName).Append("\n");
            sb.Append("  StatusUpdateBody: ").Append(StatusUpdateBody).Append("\n");
            sb.Append("  StatusUpdateCreatedAt: ").Append(StatusUpdateCreatedAt).Append("\n");
            sb.Append("  StatusUpdateCreatedByEmail: ").Append(StatusUpdateCreatedByEmail).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserEmail: ").Append(UserEmail).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Request41);
        }

        /// <summary>
        /// Returns true if Request41 instances are equal
        /// </summary>
        /// <param name="other">Instance of Request41 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request41 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AttachmentTokens == other.AttachmentTokens ||
                    this.AttachmentTokens != null &&
                    this.AttachmentTokens.Equals(other.AttachmentTokens)
                ) && 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.BodyMimeType == other.BodyMimeType ||
                    this.BodyMimeType != null &&
                    this.BodyMimeType.Equals(other.BodyMimeType)
                ) && 
                (
                    this.CategoryName == other.CategoryName ||
                    this.CategoryName != null &&
                    this.CategoryName.Equals(other.CategoryName)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.ForumName == other.ForumName ||
                    this.ForumName != null &&
                    this.ForumName.Equals(other.ForumName)
                ) && 
                (
                    this.Includes == other.Includes ||
                    this.Includes != null &&
                    this.Includes.SequenceEqual(other.Includes)
                ) && 
                (
                    this.Labels == other.Labels ||
                    this.Labels != null &&
                    this.Labels.Equals(other.Labels)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.StatusName == other.StatusName ||
                    this.StatusName != null &&
                    this.StatusName.Equals(other.StatusName)
                ) && 
                (
                    this.StatusUpdateBody == other.StatusUpdateBody ||
                    this.StatusUpdateBody != null &&
                    this.StatusUpdateBody.Equals(other.StatusUpdateBody)
                ) && 
                (
                    this.StatusUpdateCreatedAt == other.StatusUpdateCreatedAt ||
                    this.StatusUpdateCreatedAt != null &&
                    this.StatusUpdateCreatedAt.Equals(other.StatusUpdateCreatedAt)
                ) && 
                (
                    this.StatusUpdateCreatedByEmail == other.StatusUpdateCreatedByEmail ||
                    this.StatusUpdateCreatedByEmail != null &&
                    this.StatusUpdateCreatedByEmail.Equals(other.StatusUpdateCreatedByEmail)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.UserEmail == other.UserEmail ||
                    this.UserEmail != null &&
                    this.UserEmail.Equals(other.UserEmail)
                ) && 
                (
                    this.UserName == other.UserName ||
                    this.UserName != null &&
                    this.UserName.Equals(other.UserName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AttachmentTokens != null)
                    hash = hash * 59 + this.AttachmentTokens.GetHashCode();
                if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                if (this.BodyMimeType != null)
                    hash = hash * 59 + this.BodyMimeType.GetHashCode();
                if (this.CategoryName != null)
                    hash = hash * 59 + this.CategoryName.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.ForumName != null)
                    hash = hash * 59 + this.ForumName.GetHashCode();
                if (this.Includes != null)
                    hash = hash * 59 + this.Includes.GetHashCode();
                if (this.Labels != null)
                    hash = hash * 59 + this.Labels.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.StatusName != null)
                    hash = hash * 59 + this.StatusName.GetHashCode();
                if (this.StatusUpdateBody != null)
                    hash = hash * 59 + this.StatusUpdateBody.GetHashCode();
                if (this.StatusUpdateCreatedAt != null)
                    hash = hash * 59 + this.StatusUpdateCreatedAt.GetHashCode();
                if (this.StatusUpdateCreatedByEmail != null)
                    hash = hash * 59 + this.StatusUpdateCreatedByEmail.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.UserEmail != null)
                    hash = hash * 59 + this.UserEmail.GetHashCode();
                if (this.UserName != null)
                    hash = hash * 59 + this.UserName.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            // Body (string) maxLength
            if(this.Body != null && this.Body.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Body, length must be less than 10000.", new [] { "Body" });
            }

            // Title (string) maxLength
            if(this.Title != null && this.Title.Length > 140)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 140.", new [] { "Title" });
            }

            yield break;
        }
    }

}
