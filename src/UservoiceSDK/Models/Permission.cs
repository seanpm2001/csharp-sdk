/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Permission
    /// </summary>
    [DataContract]
    public partial class Permission :  IEquatable<Permission>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Permission" /> class.
        /// </summary>
        /// <param name="Feedback">Feedback.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InvitationCode">InvitationCode.</param>
        /// <param name="Knowledgebase">Knowledgebase.</param>
        /// <param name="LicenseType">LicenseType.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Settings">Settings.</param>
        /// <param name="Tickets">Tickets.</param>
        public Permission(string Feedback = null, long? Id = null, string InvitationCode = null, string Knowledgebase = null, string LicenseType = null, PermissionLinks Links = null, string Settings = null, string Tickets = null)
        {
            this.Feedback = Feedback;
            this.Id = Id;
            this.InvitationCode = InvitationCode;
            this.Knowledgebase = Knowledgebase;
            this.LicenseType = LicenseType;
            this.Links = Links;
            this.Settings = Settings;
            this.Tickets = Tickets;
        }
        
        /// <summary>
        /// Gets or Sets Feedback
        /// </summary>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public string Feedback { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets InvitationCode
        /// </summary>
        [DataMember(Name="invitation_code", EmitDefaultValue=false)]
        public string InvitationCode { get; set; }
        /// <summary>
        /// Gets or Sets Knowledgebase
        /// </summary>
        [DataMember(Name="knowledgebase", EmitDefaultValue=false)]
        public string Knowledgebase { get; set; }
        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="license_type", EmitDefaultValue=false)]
        public string LicenseType { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public PermissionLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public string Settings { get; set; }
        /// <summary>
        /// Gets or Sets Tickets
        /// </summary>
        [DataMember(Name="tickets", EmitDefaultValue=false)]
        public string Tickets { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Permission {\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvitationCode: ").Append(InvitationCode).Append("\n");
            sb.Append("  Knowledgebase: ").Append(Knowledgebase).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Tickets: ").Append(Tickets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Permission);
        }

        /// <summary>
        /// Returns true if Permission instances are equal
        /// </summary>
        /// <param name="other">Instance of Permission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Permission other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Feedback == other.Feedback ||
                    this.Feedback != null &&
                    this.Feedback.Equals(other.Feedback)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InvitationCode == other.InvitationCode ||
                    this.InvitationCode != null &&
                    this.InvitationCode.Equals(other.InvitationCode)
                ) && 
                (
                    this.Knowledgebase == other.Knowledgebase ||
                    this.Knowledgebase != null &&
                    this.Knowledgebase.Equals(other.Knowledgebase)
                ) && 
                (
                    this.LicenseType == other.LicenseType ||
                    this.LicenseType != null &&
                    this.LicenseType.Equals(other.LicenseType)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Settings == other.Settings ||
                    this.Settings != null &&
                    this.Settings.Equals(other.Settings)
                ) && 
                (
                    this.Tickets == other.Tickets ||
                    this.Tickets != null &&
                    this.Tickets.Equals(other.Tickets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Feedback != null)
                    hash = hash * 59 + this.Feedback.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.InvitationCode != null)
                    hash = hash * 59 + this.InvitationCode.GetHashCode();
                if (this.Knowledgebase != null)
                    hash = hash * 59 + this.Knowledgebase.GetHashCode();
                if (this.LicenseType != null)
                    hash = hash * 59 + this.LicenseType.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Settings != null)
                    hash = hash * 59 + this.Settings.GetHashCode();
                if (this.Tickets != null)
                    hash = hash * 59 + this.Tickets.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
