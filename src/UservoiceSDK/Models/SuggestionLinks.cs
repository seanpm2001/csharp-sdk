/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// SuggestionLinks
    /// </summary>
    [DataContract]
    public partial class SuggestionLinks :  IEquatable<SuggestionLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuggestionLinks" /> class.
        /// </summary>
        /// <param name="Category">Category.</param>
        /// <param name="CreatedBy">CreatedBy.</param>
        /// <param name="Forum">Forum.</param>
        /// <param name="Labels">Labels.</param>
        /// <param name="LastStatusUpdate">LastStatusUpdate.</param>
        /// <param name="ParentSuggestion">ParentSuggestion.</param>
        /// <param name="ParentSuggestions">ParentSuggestions.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Ticket">Ticket.</param>
        public SuggestionLinks(long? Category = null, long? CreatedBy = null, long? Forum = null, List<long?> Labels = null, long? LastStatusUpdate = null, long? ParentSuggestion = null, List<long?> ParentSuggestions = null, long? Status = null, long? Ticket = null)
        {
            this.Category = Category;
            this.CreatedBy = CreatedBy;
            this.Forum = Forum;
            this.Labels = Labels;
            this.LastStatusUpdate = LastStatusUpdate;
            this.ParentSuggestion = ParentSuggestion;
            this.ParentSuggestions = ParentSuggestions;
            this.Status = Status;
            this.Ticket = Ticket;
        }
        
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public long? Category { get; set; }
        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public long? CreatedBy { get; set; }
        /// <summary>
        /// Gets or Sets Forum
        /// </summary>
        [DataMember(Name="forum", EmitDefaultValue=false)]
        public long? Forum { get; set; }
        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<long?> Labels { get; set; }
        /// <summary>
        /// Gets or Sets LastStatusUpdate
        /// </summary>
        [DataMember(Name="last_status_update", EmitDefaultValue=false)]
        public long? LastStatusUpdate { get; set; }
        /// <summary>
        /// Gets or Sets ParentSuggestion
        /// </summary>
        [DataMember(Name="parent_suggestion", EmitDefaultValue=false)]
        public long? ParentSuggestion { get; set; }
        /// <summary>
        /// Gets or Sets ParentSuggestions
        /// </summary>
        [DataMember(Name="parent_suggestions", EmitDefaultValue=false)]
        public List<long?> ParentSuggestions { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public long? Status { get; set; }
        /// <summary>
        /// Gets or Sets Ticket
        /// </summary>
        [DataMember(Name="ticket", EmitDefaultValue=false)]
        public long? Ticket { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuggestionLinks {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Forum: ").Append(Forum).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  LastStatusUpdate: ").Append(LastStatusUpdate).Append("\n");
            sb.Append("  ParentSuggestion: ").Append(ParentSuggestion).Append("\n");
            sb.Append("  ParentSuggestions: ").Append(ParentSuggestions).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Ticket: ").Append(Ticket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SuggestionLinks);
        }

        /// <summary>
        /// Returns true if SuggestionLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of SuggestionLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuggestionLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.CreatedBy == other.CreatedBy ||
                    this.CreatedBy != null &&
                    this.CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    this.Forum == other.Forum ||
                    this.Forum != null &&
                    this.Forum.Equals(other.Forum)
                ) && 
                (
                    this.Labels == other.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    this.LastStatusUpdate == other.LastStatusUpdate ||
                    this.LastStatusUpdate != null &&
                    this.LastStatusUpdate.Equals(other.LastStatusUpdate)
                ) && 
                (
                    this.ParentSuggestion == other.ParentSuggestion ||
                    this.ParentSuggestion != null &&
                    this.ParentSuggestion.Equals(other.ParentSuggestion)
                ) && 
                (
                    this.ParentSuggestions == other.ParentSuggestions ||
                    this.ParentSuggestions != null &&
                    this.ParentSuggestions.SequenceEqual(other.ParentSuggestions)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Ticket == other.Ticket ||
                    this.Ticket != null &&
                    this.Ticket.Equals(other.Ticket)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.CreatedBy != null)
                    hash = hash * 59 + this.CreatedBy.GetHashCode();
                if (this.Forum != null)
                    hash = hash * 59 + this.Forum.GetHashCode();
                if (this.Labels != null)
                    hash = hash * 59 + this.Labels.GetHashCode();
                if (this.LastStatusUpdate != null)
                    hash = hash * 59 + this.LastStatusUpdate.GetHashCode();
                if (this.ParentSuggestion != null)
                    hash = hash * 59 + this.ParentSuggestion.GetHashCode();
                if (this.ParentSuggestions != null)
                    hash = hash * 59 + this.ParentSuggestions.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Ticket != null)
                    hash = hash * 59 + this.Ticket.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
