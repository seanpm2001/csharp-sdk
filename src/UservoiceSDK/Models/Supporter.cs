/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Supporter
    /// </summary>
    [DataContract]
    public partial class Supporter :  IEquatable<Supporter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Supporter" /> class.
        /// </summary>
        /// <param name="Channel">Channel.</param>
        /// <param name="CommentsCount">CommentsCount.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="FeedbackCount">FeedbackCount.</param>
        /// <param name="How">How.</param>
        /// <param name="Id">Id.</param>
        /// <param name="IsSubscribed">IsSubscribed.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Traits">Traits.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public Supporter(string Channel = null, long? CommentsCount = null, DateTime? CreatedAt = null, long? FeedbackCount = null, string How = null, long? Id = null, bool? IsSubscribed = null, SupporterLinks Links = null, SupporterTraits Traits = null, DateTime? UpdatedAt = null)
        {
            this.Channel = Channel;
            this.CommentsCount = CommentsCount;
            this.CreatedAt = CreatedAt;
            this.FeedbackCount = FeedbackCount;
            this.How = How;
            this.Id = Id;
            this.IsSubscribed = IsSubscribed;
            this.Links = Links;
            this.Traits = Traits;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }
        /// <summary>
        /// Gets or Sets CommentsCount
        /// </summary>
        [DataMember(Name="comments_count", EmitDefaultValue=false)]
        public long? CommentsCount { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets FeedbackCount
        /// </summary>
        [DataMember(Name="feedback_count", EmitDefaultValue=false)]
        public long? FeedbackCount { get; set; }
        /// <summary>
        /// Gets or Sets How
        /// </summary>
        [DataMember(Name="how", EmitDefaultValue=false)]
        public string How { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets IsSubscribed
        /// </summary>
        [DataMember(Name="is_subscribed", EmitDefaultValue=false)]
        public bool? IsSubscribed { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public SupporterLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets Traits
        /// </summary>
        [DataMember(Name="traits", EmitDefaultValue=false)]
        public SupporterTraits Traits { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Supporter {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CommentsCount: ").Append(CommentsCount).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FeedbackCount: ").Append(FeedbackCount).Append("\n");
            sb.Append("  How: ").Append(How).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsSubscribed: ").Append(IsSubscribed).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Traits: ").Append(Traits).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Supporter);
        }

        /// <summary>
        /// Returns true if Supporter instances are equal
        /// </summary>
        /// <param name="other">Instance of Supporter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Supporter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Channel == other.Channel ||
                    this.Channel != null &&
                    this.Channel.Equals(other.Channel)
                ) && 
                (
                    this.CommentsCount == other.CommentsCount ||
                    this.CommentsCount != null &&
                    this.CommentsCount.Equals(other.CommentsCount)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.FeedbackCount == other.FeedbackCount ||
                    this.FeedbackCount != null &&
                    this.FeedbackCount.Equals(other.FeedbackCount)
                ) && 
                (
                    this.How == other.How ||
                    this.How != null &&
                    this.How.Equals(other.How)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsSubscribed == other.IsSubscribed ||
                    this.IsSubscribed != null &&
                    this.IsSubscribed.Equals(other.IsSubscribed)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Traits == other.Traits ||
                    this.Traits != null &&
                    this.Traits.Equals(other.Traits)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Channel != null)
                    hash = hash * 59 + this.Channel.GetHashCode();
                if (this.CommentsCount != null)
                    hash = hash * 59 + this.CommentsCount.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.FeedbackCount != null)
                    hash = hash * 59 + this.FeedbackCount.GetHashCode();
                if (this.How != null)
                    hash = hash * 59 + this.How.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsSubscribed != null)
                    hash = hash * 59 + this.IsSubscribed.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Traits != null)
                    hash = hash * 59 + this.Traits.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
