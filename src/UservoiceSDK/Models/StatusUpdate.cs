/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// StatusUpdate
    /// </summary>
    [DataContract]
    public partial class StatusUpdate :  IEquatable<StatusUpdate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdate" /> class.
        /// </summary>
        /// <param name="Body">Body.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Links">Links.</param>
        /// <param name="MailClickedCount">MailClickedCount.</param>
        /// <param name="MailOpenedCount">MailOpenedCount.</param>
        /// <param name="MailSentCount">MailSentCount.</param>
        /// <param name="NotificationEmailAddress">NotificationEmailAddress.</param>
        /// <param name="SupportersNotified">SupportersNotified.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public StatusUpdate(string Body = null, DateTime? CreatedAt = null, long? Id = null, StatusUpdateLinks Links = null, long? MailClickedCount = null, long? MailOpenedCount = null, long? MailSentCount = null, string NotificationEmailAddress = null, bool? SupportersNotified = null, DateTime? UpdatedAt = null)
        {
            this.Body = Body;
            this.CreatedAt = CreatedAt;
            this.Id = Id;
            this.Links = Links;
            this.MailClickedCount = MailClickedCount;
            this.MailOpenedCount = MailOpenedCount;
            this.MailSentCount = MailSentCount;
            this.NotificationEmailAddress = NotificationEmailAddress;
            this.SupportersNotified = SupportersNotified;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public StatusUpdateLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets MailClickedCount
        /// </summary>
        [DataMember(Name="mail_clicked_count", EmitDefaultValue=false)]
        public long? MailClickedCount { get; set; }
        /// <summary>
        /// Gets or Sets MailOpenedCount
        /// </summary>
        [DataMember(Name="mail_opened_count", EmitDefaultValue=false)]
        public long? MailOpenedCount { get; set; }
        /// <summary>
        /// Gets or Sets MailSentCount
        /// </summary>
        [DataMember(Name="mail_sent_count", EmitDefaultValue=false)]
        public long? MailSentCount { get; set; }
        /// <summary>
        /// Gets or Sets NotificationEmailAddress
        /// </summary>
        [DataMember(Name="notification_email_address", EmitDefaultValue=false)]
        public string NotificationEmailAddress { get; set; }
        /// <summary>
        /// Gets or Sets SupportersNotified
        /// </summary>
        [DataMember(Name="supporters_notified", EmitDefaultValue=false)]
        public bool? SupportersNotified { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusUpdate {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  MailClickedCount: ").Append(MailClickedCount).Append("\n");
            sb.Append("  MailOpenedCount: ").Append(MailOpenedCount).Append("\n");
            sb.Append("  MailSentCount: ").Append(MailSentCount).Append("\n");
            sb.Append("  NotificationEmailAddress: ").Append(NotificationEmailAddress).Append("\n");
            sb.Append("  SupportersNotified: ").Append(SupportersNotified).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StatusUpdate);
        }

        /// <summary>
        /// Returns true if StatusUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of StatusUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusUpdate other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Body == other.Body ||
                    this.Body != null &&
                    this.Body.Equals(other.Body)
                ) && 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.MailClickedCount == other.MailClickedCount ||
                    this.MailClickedCount != null &&
                    this.MailClickedCount.Equals(other.MailClickedCount)
                ) && 
                (
                    this.MailOpenedCount == other.MailOpenedCount ||
                    this.MailOpenedCount != null &&
                    this.MailOpenedCount.Equals(other.MailOpenedCount)
                ) && 
                (
                    this.MailSentCount == other.MailSentCount ||
                    this.MailSentCount != null &&
                    this.MailSentCount.Equals(other.MailSentCount)
                ) && 
                (
                    this.NotificationEmailAddress == other.NotificationEmailAddress ||
                    this.NotificationEmailAddress != null &&
                    this.NotificationEmailAddress.Equals(other.NotificationEmailAddress)
                ) && 
                (
                    this.SupportersNotified == other.SupportersNotified ||
                    this.SupportersNotified != null &&
                    this.SupportersNotified.Equals(other.SupportersNotified)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Body != null)
                    hash = hash * 59 + this.Body.GetHashCode();
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.MailClickedCount != null)
                    hash = hash * 59 + this.MailClickedCount.GetHashCode();
                if (this.MailOpenedCount != null)
                    hash = hash * 59 + this.MailOpenedCount.GetHashCode();
                if (this.MailSentCount != null)
                    hash = hash * 59 + this.MailSentCount.GetHashCode();
                if (this.NotificationEmailAddress != null)
                    hash = hash * 59 + this.NotificationEmailAddress.GetHashCode();
                if (this.SupportersNotified != null)
                    hash = hash * 59 + this.SupportersNotified.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
