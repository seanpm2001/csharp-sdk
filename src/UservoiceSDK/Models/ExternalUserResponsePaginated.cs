/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// ExternalUserResponsePaginated
    /// </summary>
    [DataContract]
    public partial class ExternalUserResponsePaginated :  IEquatable<ExternalUserResponsePaginated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExternalUserResponsePaginated" /> class.
        /// </summary>
        /// <param name="ExternalAccounts">ExternalAccounts.</param>
        /// <param name="ExternalUsers">ExternalUsers.</param>
        /// <param name="Users">Users.</param>
        /// <param name="Pagination">Pagination.</param>
        public ExternalUserResponsePaginated(List<ExternalAccount> ExternalAccounts = null, List<ExternalUser> ExternalUsers = null, List<User> Users = null, Pagination Pagination = null)
        {
            this.ExternalAccounts = ExternalAccounts;
            this.ExternalUsers = ExternalUsers;
            this.Users = Users;
            this.Pagination = Pagination;
        }
        
        /// <summary>
        /// Gets or Sets ExternalAccounts
        /// </summary>
        [DataMember(Name="external_accounts", EmitDefaultValue=false)]
        public List<ExternalAccount> ExternalAccounts { get; set; }
        /// <summary>
        /// Gets or Sets ExternalUsers
        /// </summary>
        [DataMember(Name="external_users", EmitDefaultValue=false)]
        public List<ExternalUser> ExternalUsers { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<User> Users { get; set; }
        /// <summary>
        /// Gets or Sets Pagination
        /// </summary>
        [DataMember(Name="pagination", EmitDefaultValue=false)]
        public Pagination Pagination { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExternalUserResponsePaginated {\n");
            sb.Append("  ExternalAccounts: ").Append(ExternalAccounts).Append("\n");
            sb.Append("  ExternalUsers: ").Append(ExternalUsers).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Pagination: ").Append(Pagination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExternalUserResponsePaginated);
        }

        /// <summary>
        /// Returns true if ExternalUserResponsePaginated instances are equal
        /// </summary>
        /// <param name="other">Instance of ExternalUserResponsePaginated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExternalUserResponsePaginated other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ExternalAccounts == other.ExternalAccounts ||
                    this.ExternalAccounts != null &&
                    this.ExternalAccounts.SequenceEqual(other.ExternalAccounts)
                ) && 
                (
                    this.ExternalUsers == other.ExternalUsers ||
                    this.ExternalUsers != null &&
                    this.ExternalUsers.SequenceEqual(other.ExternalUsers)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                ) && 
                (
                    this.Pagination == other.Pagination ||
                    this.Pagination != null &&
                    this.Pagination.Equals(other.Pagination)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ExternalAccounts != null)
                    hash = hash * 59 + this.ExternalAccounts.GetHashCode();
                if (this.ExternalUsers != null)
                    hash = hash * 59 + this.ExternalUsers.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.Pagination != null)
                    hash = hash * 59 + this.Pagination.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
