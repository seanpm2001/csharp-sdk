/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// ViewResponse
    /// </summary>
    [DataContract]
    public partial class ViewResponse :  IEquatable<ViewResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ViewResponse" /> class.
        /// </summary>
        /// <param name="SmartvoteExperiments">SmartvoteExperiments.</param>
        /// <param name="Suggestions">Suggestions.</param>
        /// <param name="Users">Users.</param>
        /// <param name="Views">Views.</param>
        public ViewResponse(List<SmartvoteExperiment> SmartvoteExperiments = null, List<Suggestion> Suggestions = null, List<User> Users = null, List<View> Views = null)
        {
            this.SmartvoteExperiments = SmartvoteExperiments;
            this.Suggestions = Suggestions;
            this.Users = Users;
            this.Views = Views;
        }
        
        /// <summary>
        /// Gets or Sets SmartvoteExperiments
        /// </summary>
        [DataMember(Name="smartvote_experiments", EmitDefaultValue=false)]
        public List<SmartvoteExperiment> SmartvoteExperiments { get; set; }
        /// <summary>
        /// Gets or Sets Suggestions
        /// </summary>
        [DataMember(Name="suggestions", EmitDefaultValue=false)]
        public List<Suggestion> Suggestions { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<User> Users { get; set; }
        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [DataMember(Name="views", EmitDefaultValue=false)]
        public List<View> Views { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ViewResponse {\n");
            sb.Append("  SmartvoteExperiments: ").Append(SmartvoteExperiments).Append("\n");
            sb.Append("  Suggestions: ").Append(Suggestions).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ViewResponse);
        }

        /// <summary>
        /// Returns true if ViewResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ViewResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ViewResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SmartvoteExperiments == other.SmartvoteExperiments ||
                    this.SmartvoteExperiments != null &&
                    this.SmartvoteExperiments.SequenceEqual(other.SmartvoteExperiments)
                ) && 
                (
                    this.Suggestions == other.Suggestions ||
                    this.Suggestions != null &&
                    this.Suggestions.SequenceEqual(other.Suggestions)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                ) && 
                (
                    this.Views == other.Views ||
                    this.Views != null &&
                    this.Views.SequenceEqual(other.Views)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SmartvoteExperiments != null)
                    hash = hash * 59 + this.SmartvoteExperiments.GetHashCode();
                if (this.Suggestions != null)
                    hash = hash * 59 + this.Suggestions.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                if (this.Views != null)
                    hash = hash * 59 + this.Views.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
