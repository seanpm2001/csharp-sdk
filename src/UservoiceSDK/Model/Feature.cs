/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UserVoiceSdk.Models
{
    /// <summary>
    /// Feature
    /// </summary>
    [DataContract]
    public partial class Feature :  IEquatable<Feature>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Feature" /> class.
        /// </summary>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Links">Links.</param>
        /// <param name="Name">Name.</param>
        /// <param name="SuggestionsCount">SuggestionsCount.</param>
        /// <param name="SupporterMrrCents">SupporterMrrCents.</param>
        /// <param name="SupportingAccountsCount">SupportingAccountsCount.</param>
        /// <param name="SupportingUsersCount">SupportingUsersCount.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public Feature(DateTime? CreatedAt = null, string Description = null, long? Id = null, FeatureLinks Links = null, string Name = null, long? SuggestionsCount = null, long? SupporterMrrCents = null, long? SupportingAccountsCount = null, long? SupportingUsersCount = null, DateTime? UpdatedAt = null)
        {
            this.CreatedAt = CreatedAt;
            this.Description = Description;
            this.Id = Id;
            this.Links = Links;
            this.Name = Name;
            this.SuggestionsCount = SuggestionsCount;
            this.SupporterMrrCents = SupporterMrrCents;
            this.SupportingAccountsCount = SupportingAccountsCount;
            this.SupportingUsersCount = SupportingUsersCount;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=false)]
        public FeatureLinks Links { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets SuggestionsCount
        /// </summary>
        [DataMember(Name="suggestions_count", EmitDefaultValue=false)]
        public long? SuggestionsCount { get; set; }
        /// <summary>
        /// Gets or Sets SupporterMrrCents
        /// </summary>
        [DataMember(Name="supporter_mrr_cents", EmitDefaultValue=false)]
        public long? SupporterMrrCents { get; set; }
        /// <summary>
        /// Gets or Sets SupportingAccountsCount
        /// </summary>
        [DataMember(Name="supporting_accounts_count", EmitDefaultValue=false)]
        public long? SupportingAccountsCount { get; set; }
        /// <summary>
        /// Gets or Sets SupportingUsersCount
        /// </summary>
        [DataMember(Name="supporting_users_count", EmitDefaultValue=false)]
        public long? SupportingUsersCount { get; set; }
        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Feature {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SuggestionsCount: ").Append(SuggestionsCount).Append("\n");
            sb.Append("  SupporterMrrCents: ").Append(SupporterMrrCents).Append("\n");
            sb.Append("  SupportingAccountsCount: ").Append(SupportingAccountsCount).Append("\n");
            sb.Append("  SupportingUsersCount: ").Append(SupportingUsersCount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Feature);
        }

        /// <summary>
        /// Returns true if Feature instances are equal
        /// </summary>
        /// <param name="other">Instance of Feature to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Feature other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreatedAt == other.CreatedAt ||
                    this.CreatedAt != null &&
                    this.CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Links == other.Links ||
                    this.Links != null &&
                    this.Links.Equals(other.Links)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.SuggestionsCount == other.SuggestionsCount ||
                    this.SuggestionsCount != null &&
                    this.SuggestionsCount.Equals(other.SuggestionsCount)
                ) && 
                (
                    this.SupporterMrrCents == other.SupporterMrrCents ||
                    this.SupporterMrrCents != null &&
                    this.SupporterMrrCents.Equals(other.SupporterMrrCents)
                ) && 
                (
                    this.SupportingAccountsCount == other.SupportingAccountsCount ||
                    this.SupportingAccountsCount != null &&
                    this.SupportingAccountsCount.Equals(other.SupportingAccountsCount)
                ) && 
                (
                    this.SupportingUsersCount == other.SupportingUsersCount ||
                    this.SupportingUsersCount != null &&
                    this.SupportingUsersCount.Equals(other.SupportingUsersCount)
                ) && 
                (
                    this.UpdatedAt == other.UpdatedAt ||
                    this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(other.UpdatedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedAt != null)
                    hash = hash * 59 + this.CreatedAt.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Links != null)
                    hash = hash * 59 + this.Links.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.SuggestionsCount != null)
                    hash = hash * 59 + this.SuggestionsCount.GetHashCode();
                if (this.SupporterMrrCents != null)
                    hash = hash * 59 + this.SupporterMrrCents.GetHashCode();
                if (this.SupportingAccountsCount != null)
                    hash = hash * 59 + this.SupportingAccountsCount.GetHashCode();
                if (this.SupportingUsersCount != null)
                    hash = hash * 59 + this.SupportingUsersCount.GetHashCode();
                if (this.UpdatedAt != null)
                    hash = hash * 59 + this.UpdatedAt.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
