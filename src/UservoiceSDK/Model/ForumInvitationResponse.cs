/* 
 * UserVoice API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UservoiceSDK.Models
{
    /// <summary>
    /// ForumInvitationResponse
    /// </summary>
    [DataContract]
    public partial class ForumInvitationResponse :  IEquatable<ForumInvitationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ForumInvitationResponse" /> class.
        /// </summary>
        /// <param name="ForumInvitations">ForumInvitations.</param>
        /// <param name="Forums">Forums.</param>
        /// <param name="Users">Users.</param>
        public ForumInvitationResponse(List<ForumInvitation> ForumInvitations = null, List<Forum> Forums = null, List<User> Users = null)
        {
            this.ForumInvitations = ForumInvitations;
            this.Forums = Forums;
            this.Users = Users;
        }
        
        /// <summary>
        /// Gets or Sets ForumInvitations
        /// </summary>
        [DataMember(Name="forum_invitations", EmitDefaultValue=false)]
        public List<ForumInvitation> ForumInvitations { get; set; }
        /// <summary>
        /// Gets or Sets Forums
        /// </summary>
        [DataMember(Name="forums", EmitDefaultValue=false)]
        public List<Forum> Forums { get; set; }
        /// <summary>
        /// Gets or Sets Users
        /// </summary>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<User> Users { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ForumInvitationResponse {\n");
            sb.Append("  ForumInvitations: ").Append(ForumInvitations).Append("\n");
            sb.Append("  Forums: ").Append(Forums).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ForumInvitationResponse);
        }

        /// <summary>
        /// Returns true if ForumInvitationResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ForumInvitationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ForumInvitationResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ForumInvitations == other.ForumInvitations ||
                    this.ForumInvitations != null &&
                    this.ForumInvitations.SequenceEqual(other.ForumInvitations)
                ) && 
                (
                    this.Forums == other.Forums ||
                    this.Forums != null &&
                    this.Forums.SequenceEqual(other.Forums)
                ) && 
                (
                    this.Users == other.Users ||
                    this.Users != null &&
                    this.Users.SequenceEqual(other.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ForumInvitations != null)
                    hash = hash * 59 + this.ForumInvitations.GetHashCode();
                if (this.Forums != null)
                    hash = hash * 59 + this.Forums.GetHashCode();
                if (this.Users != null)
                    hash = hash * 59 + this.Users.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
