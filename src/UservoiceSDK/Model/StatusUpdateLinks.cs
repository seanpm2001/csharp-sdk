/* 
 * UserVoice API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace UservoiceSDK.Models
{
    /// <summary>
    /// StatusUpdateLinks
    /// </summary>
    [DataContract]
    public partial class StatusUpdateLinks :  IEquatable<StatusUpdateLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusUpdateLinks" /> class.
        /// </summary>
        /// <param name="NewStatus">NewStatus.</param>
        /// <param name="OldStatus">OldStatus.</param>
        /// <param name="Suggestion">Suggestion.</param>
        /// <param name="User">User.</param>
        public StatusUpdateLinks(long? NewStatus = null, long? OldStatus = null, long? Suggestion = null, long? User = null)
        {
            this.NewStatus = NewStatus;
            this.OldStatus = OldStatus;
            this.Suggestion = Suggestion;
            this.User = User;
        }
        
        /// <summary>
        /// Gets or Sets NewStatus
        /// </summary>
        [DataMember(Name="new_status", EmitDefaultValue=false)]
        public long? NewStatus { get; set; }
        /// <summary>
        /// Gets or Sets OldStatus
        /// </summary>
        [DataMember(Name="old_status", EmitDefaultValue=false)]
        public long? OldStatus { get; set; }
        /// <summary>
        /// Gets or Sets Suggestion
        /// </summary>
        [DataMember(Name="suggestion", EmitDefaultValue=false)]
        public long? Suggestion { get; set; }
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public long? User { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusUpdateLinks {\n");
            sb.Append("  NewStatus: ").Append(NewStatus).Append("\n");
            sb.Append("  OldStatus: ").Append(OldStatus).Append("\n");
            sb.Append("  Suggestion: ").Append(Suggestion).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as StatusUpdateLinks);
        }

        /// <summary>
        /// Returns true if StatusUpdateLinks instances are equal
        /// </summary>
        /// <param name="other">Instance of StatusUpdateLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusUpdateLinks other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NewStatus == other.NewStatus ||
                    this.NewStatus != null &&
                    this.NewStatus.Equals(other.NewStatus)
                ) && 
                (
                    this.OldStatus == other.OldStatus ||
                    this.OldStatus != null &&
                    this.OldStatus.Equals(other.OldStatus)
                ) && 
                (
                    this.Suggestion == other.Suggestion ||
                    this.Suggestion != null &&
                    this.Suggestion.Equals(other.Suggestion)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NewStatus != null)
                    hash = hash * 59 + this.NewStatus.GetHashCode();
                if (this.OldStatus != null)
                    hash = hash * 59 + this.OldStatus.GetHashCode();
                if (this.Suggestion != null)
                    hash = hash * 59 + this.Suggestion.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
