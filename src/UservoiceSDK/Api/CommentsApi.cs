/* 
 * UserVoice API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UservoiceSDK.Client;
using UservoiceSDK.Models;

namespace UservoiceSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse ApproveById (long? id, List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> ApproveByIdWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// # Create a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse Create (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null);

        /// <summary>
        /// # Create a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> CreateWithHttpInfo (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null);
        /// <summary>
        /// # Delete a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse DeleteById (long? id, List<string> includes = null);

        /// <summary>
        /// # Delete a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> DeleteByIdWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// # List comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponsePaginated</returns>
        CommentResponsePaginated Get (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null);

        /// <summary>
        /// # List comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponsePaginated</returns>
        ApiResponse<CommentResponsePaginated> GetWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve comments by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse GetById (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve comments by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> GetByIdWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse SpamById (long? id, List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> SpamByIdWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        CommentResponse UnremoveById (long? id, List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        ApiResponse<CommentResponse> UnremoveByIdWithHttpInfo (long? id, List<string> includes = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> ApproveByIdAsync (long? id, List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> ApproveByIdAsyncWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// # Create a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> CreateAsync (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null);

        /// <summary>
        /// # Create a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CreateAsyncWithHttpInfo (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null);
        /// <summary>
        /// # Delete a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> DeleteByIdAsync (long? id, List<string> includes = null);

        /// <summary>
        /// # Delete a comment
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> DeleteByIdAsyncWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// # List comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponsePaginated</returns>
        System.Threading.Tasks.Task<CommentResponsePaginated> GetAsync (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null);

        /// <summary>
        /// # List comments
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponsePaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve comments by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> GetByIdAsync (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve comments by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> SpamByIdAsync (long? id, List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> SpamByIdAsyncWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        System.Threading.Tasks.Task<CommentResponse> UnremoveByIdAsync (long? id, List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommentResponse>> UnremoveByIdAsyncWithHttpInfo (long? id, List<string> includes = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommentsApi : ICommentsApi
    {
        private UservoiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public CommentsApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UservoiceSDK.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UservoiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse ApproveById (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = ApproveByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > ApproveByIdWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->ApproveById");

            var localVarPath = "/admin/comments/{id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> ApproveByIdAsync (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await ApproveByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> ApproveByIdAsyncWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->ApproveById");

            var localVarPath = "/admin/comments/{id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        /// # Create a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse Create (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = CreateWithHttpInfo(body, linksSuggestion, bodyMimeType, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Create a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > CreateWithHttpInfo (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CommentsApi->Create");
            // verify the required parameter 'linksSuggestion' is set
            if (linksSuggestion == null)
                throw new ApiException(400, "Missing required parameter 'linksSuggestion' when calling CommentsApi->Create");

            var localVarPath = "/admin/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null) localVarFormParams.Add("body", Configuration.ApiClient.ParameterToString(body)); // form parameter
            if (bodyMimeType != null) localVarFormParams.Add("body_mime_type", Configuration.ApiClient.ParameterToString(bodyMimeType)); // form parameter
            if (linksSuggestion != null) localVarFormParams.Add("links.suggestion", Configuration.ApiClient.ParameterToString(linksSuggestion)); // form parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        /// # Create a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> CreateAsync (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await CreateAsyncWithHttpInfo(body, linksSuggestion, bodyMimeType, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Create a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="linksSuggestion"></param>
        /// <param name="bodyMimeType"> (optional, default to text/plain)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> CreateAsyncWithHttpInfo (string body, long? linksSuggestion, string bodyMimeType = null, List<string> includes = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CommentsApi->Create");
            // verify the required parameter 'linksSuggestion' is set
            if (linksSuggestion == null)
                throw new ApiException(400, "Missing required parameter 'linksSuggestion' when calling CommentsApi->Create");

            var localVarPath = "/admin/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null) localVarFormParams.Add("body", Configuration.ApiClient.ParameterToString(body)); // form parameter
            if (bodyMimeType != null) localVarFormParams.Add("body_mime_type", Configuration.ApiClient.ParameterToString(bodyMimeType)); // form parameter
            if (linksSuggestion != null) localVarFormParams.Add("links.suggestion", Configuration.ApiClient.ParameterToString(linksSuggestion)); // form parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        /// # Delete a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse DeleteById (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = DeleteByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Delete a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > DeleteByIdWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->DeleteById");

            var localVarPath = "/admin/comments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        /// # Delete a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> DeleteByIdAsync (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await DeleteByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Delete a comment 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> DeleteByIdAsyncWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->DeleteById");

            var localVarPath = "/admin/comments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        /// # List comments 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponsePaginated</returns>
        public CommentResponsePaginated Get (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null)
        {
             ApiResponse<CommentResponsePaginated> localVarResponse = GetWithHttpInfo(page, perPage, bulkPerPage, sort, state, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # List comments 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponsePaginated</returns>
        public ApiResponse< CommentResponsePaginated > GetWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null)
        {

            var localVarPath = "/admin/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (bulkPerPage != null) localVarQueryParams.Add("bulk_per_page", Configuration.ApiClient.ParameterToString(bulkPerPage)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponsePaginated)));
            
        }

        /// <summary>
        /// # List comments 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponsePaginated</returns>
        public async System.Threading.Tasks.Task<CommentResponsePaginated> GetAsync (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null)
        {
             ApiResponse<CommentResponsePaginated> localVarResponse = await GetAsyncWithHttpInfo(page, perPage, bulkPerPage, sort, state, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # List comments 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponsePaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> state = null, List<string> includes = null)
        {

            var localVarPath = "/admin/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (bulkPerPage != null) localVarQueryParams.Add("bulk_per_page", Configuration.ApiClient.ParameterToString(bulkPerPage)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponsePaginated)));
            
        }

        /// <summary>
        /// # Retrieve comments by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse GetById (List<int?> id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = GetByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Retrieve comments by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > GetByIdWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->GetById");

            var localVarPath = "/admin/comments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        /// # Retrieve comments by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> GetByIdAsync (List<int?> id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Retrieve comments by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->GetById");

            var localVarPath = "/admin/comments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse SpamById (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = SpamByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > SpamByIdWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->SpamById");

            var localVarPath = "/admin/comments/{id}/spam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> SpamByIdAsync (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await SpamByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> SpamByIdAsyncWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->SpamById");

            var localVarPath = "/admin/comments/{id}/spam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CommentResponse</returns>
        public CommentResponse UnremoveById (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = UnremoveByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CommentResponse</returns>
        public ApiResponse< CommentResponse > UnremoveByIdWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->UnremoveById");

            var localVarPath = "/admin/comments/{id}/unremove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnremoveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CommentResponse</returns>
        public async System.Threading.Tasks.Task<CommentResponse> UnremoveByIdAsync (long? id, List<string> includes = null)
        {
             ApiResponse<CommentResponse> localVarResponse = await UnremoveByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CommentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CommentResponse>> UnremoveByIdAsyncWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CommentsApi->UnremoveById");

            var localVarPath = "/admin/comments/{id}/unremove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnremoveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CommentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CommentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CommentResponse)));
            
        }

    }
}
