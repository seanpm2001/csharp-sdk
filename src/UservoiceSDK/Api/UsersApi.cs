/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UserVoiceSdk.Client;
using UserVoiceSdk.Models;

namespace UserVoiceSdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse BlockById (long? id, Request50 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> BlockByIdWithHttpInfo (long? id, Request50 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse Current (List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> CurrentWithHttpInfo (List<string> includes = null);
        /// <summary>
        /// # Create an user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse FindOrCreate (Request49 request = null);

        /// <summary>
        /// # Create an user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> FindOrCreateWithHttpInfo (Request49 request = null);
        /// <summary>
        /// # List users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>UserResponsePaginated</returns>
        UserResponsePaginated Get (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null);

        /// <summary>
        /// # List users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of UserResponsePaginated</returns>
        ApiResponse<UserResponsePaginated> GetWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse GetById (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> GetByIdWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>UserResponse</returns>
        UserResponse UnblockById (long? id, Request51 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        ApiResponse<UserResponse> UnblockByIdWithHttpInfo (long? id, Request51 request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> BlockByIdAsync (long? id, Request50 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> BlockByIdAsyncWithHttpInfo (long? id, Request50 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> CurrentAsync (List<string> includes = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> CurrentAsyncWithHttpInfo (List<string> includes = null);
        /// <summary>
        /// # Create an user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> FindOrCreateAsync (Request49 request = null);

        /// <summary>
        /// # Create an user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> FindOrCreateAsyncWithHttpInfo (Request49 request = null);
        /// <summary>
        /// # List users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of UserResponsePaginated</returns>
        System.Threading.Tasks.Task<UserResponsePaginated> GetAsync (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null);

        /// <summary>
        /// # List users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponsePaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> GetByIdAsync (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of UserResponse</returns>
        System.Threading.Tasks.Task<UserResponse> UnblockByIdAsync (long? id, Request51 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserResponse>> UnblockByIdAsyncWithHttpInfo (long? id, Request51 request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private UserVoiceSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public UsersApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UserVoiceSdk.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UserVoiceSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse BlockById (long? id, Request50 request = null)
        {
             ApiResponse<UserResponse> localVarResponse = BlockByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public ApiResponse< UserResponse > BlockByIdWithHttpInfo (long? id, Request50 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->BlockById");

            var localVarPath = "/admin/users/{id}/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> BlockByIdAsync (long? id, Request50 request = null)
        {
             ApiResponse<UserResponse> localVarResponse = await BlockByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponse>> BlockByIdAsyncWithHttpInfo (long? id, Request50 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->BlockById");

            var localVarPath = "/admin/users/{id}/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse Current (List<string> includes = null)
        {
             ApiResponse<UserResponse> localVarResponse = CurrentWithHttpInfo(includes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public ApiResponse< UserResponse > CurrentWithHttpInfo (List<string> includes = null)
        {

            var localVarPath = "/admin/users/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Current", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> CurrentAsync (List<string> includes = null)
        {
             ApiResponse<UserResponse> localVarResponse = await CurrentAsyncWithHttpInfo(includes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponse>> CurrentAsyncWithHttpInfo (List<string> includes = null)
        {

            var localVarPath = "/admin/users/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Current", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        /// # Create an user 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse FindOrCreate (Request49 request = null)
        {
             ApiResponse<UserResponse> localVarResponse = FindOrCreateWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Create an user 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public ApiResponse< UserResponse > FindOrCreateWithHttpInfo (Request49 request = null)
        {

            var localVarPath = "/admin/users/find_or_create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOrCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        /// # Create an user 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> FindOrCreateAsync (Request49 request = null)
        {
             ApiResponse<UserResponse> localVarResponse = await FindOrCreateAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Create an user 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponse>> FindOrCreateAsyncWithHttpInfo (Request49 request = null)
        {

            var localVarPath = "/admin/users/find_or_create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindOrCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        /// # List users 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>UserResponsePaginated</returns>
        public UserResponsePaginated Get (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null)
        {
             ApiResponse<UserResponsePaginated> localVarResponse = GetWithHttpInfo(page, perPage, pageToken, sort, q, expression, emailAddress, allowedState, internalUser, team, externalAccount, suggestion, feature, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # List users 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of UserResponsePaginated</returns>
        public ApiResponse< UserResponsePaginated > GetWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null)
        {

            var localVarPath = "/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (pageToken != null) localVarQueryParams.Add("page_token", Configuration.ApiClient.ParameterToString(pageToken)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (expression != null) localVarQueryParams.Add("expression", Configuration.ApiClient.ParameterToString(expression)); // query parameter
            if (emailAddress != null) localVarQueryParams.Add("email_address", Configuration.ApiClient.ParameterToString(emailAddress)); // query parameter
            if (allowedState != null) localVarQueryParams.Add("allowed_state", Configuration.ApiClient.ParameterToString(allowedState)); // query parameter
            if (internalUser != null) localVarQueryParams.Add("internal_user", Configuration.ApiClient.ParameterToString(internalUser)); // query parameter
            if (team != null) localVarQueryParams.Add("team", Configuration.ApiClient.ParameterToString(team)); // query parameter
            if (externalAccount != null) localVarQueryParams.Add("external_account", Configuration.ApiClient.ParameterToString(externalAccount)); // query parameter
            if (suggestion != null) localVarQueryParams.Add("suggestion", Configuration.ApiClient.ParameterToString(suggestion)); // query parameter
            if (feature != null) localVarQueryParams.Add("feature", Configuration.ApiClient.ParameterToString(feature)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponsePaginated)));
            
        }

        /// <summary>
        /// # List users 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of UserResponsePaginated</returns>
        public async System.Threading.Tasks.Task<UserResponsePaginated> GetAsync (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null)
        {
             ApiResponse<UserResponsePaginated> localVarResponse = await GetAsyncWithHttpInfo(page, perPage, pageToken, sort, q, expression, emailAddress, allowedState, internalUser, team, externalAccount, suggestion, feature, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # List users 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort">Specify custom field sorting by object and key, e.g. &#39;external_users.cf_persona&#39;. Text custom fields cannot be sorted. (optional, default to -id)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="expression"> (optional)</param>
        /// <param name="emailAddress"> (optional)</param>
        /// <param name="allowedState"> (optional)</param>
        /// <param name="internalUser"> (optional)</param>
        /// <param name="team"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="suggestion"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponsePaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, string q = null, string expression = null, List<string> emailAddress = null, List<string> allowedState = null, bool? internalUser = null, List<int?> team = null, List<int?> externalAccount = null, List<int?> suggestion = null, List<int?> feature = null, List<string> includes = null)
        {

            var localVarPath = "/admin/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (pageToken != null) localVarQueryParams.Add("page_token", Configuration.ApiClient.ParameterToString(pageToken)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (expression != null) localVarQueryParams.Add("expression", Configuration.ApiClient.ParameterToString(expression)); // query parameter
            if (emailAddress != null) localVarQueryParams.Add("email_address", Configuration.ApiClient.ParameterToString(emailAddress)); // query parameter
            if (allowedState != null) localVarQueryParams.Add("allowed_state", Configuration.ApiClient.ParameterToString(allowedState)); // query parameter
            if (internalUser != null) localVarQueryParams.Add("internal_user", Configuration.ApiClient.ParameterToString(internalUser)); // query parameter
            if (team != null) localVarQueryParams.Add("team", Configuration.ApiClient.ParameterToString(team)); // query parameter
            if (externalAccount != null) localVarQueryParams.Add("external_account", Configuration.ApiClient.ParameterToString(externalAccount)); // query parameter
            if (suggestion != null) localVarQueryParams.Add("suggestion", Configuration.ApiClient.ParameterToString(suggestion)); // query parameter
            if (feature != null) localVarQueryParams.Add("feature", Configuration.ApiClient.ParameterToString(feature)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponsePaginated)));
            
        }

        /// <summary>
        /// # Retrieve users by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse GetById (List<int?> id, List<string> includes = null)
        {
             ApiResponse<UserResponse> localVarResponse = GetByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Retrieve users by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public ApiResponse< UserResponse > GetByIdWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetById");

            var localVarPath = "/admin/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        /// # Retrieve users by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> GetByIdAsync (List<int?> id, List<string> includes = null)
        {
             ApiResponse<UserResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Retrieve users by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->GetById");

            var localVarPath = "/admin/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>UserResponse</returns>
        public UserResponse UnblockById (long? id, Request51 request = null)
        {
             ApiResponse<UserResponse> localVarResponse = UnblockByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of UserResponse</returns>
        public ApiResponse< UserResponse > UnblockByIdWithHttpInfo (long? id, Request51 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UnblockById");

            var localVarPath = "/admin/users/{id}/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of UserResponse</returns>
        public async System.Threading.Tasks.Task<UserResponse> UnblockByIdAsync (long? id, Request51 request = null)
        {
             ApiResponse<UserResponse> localVarResponse = await UnblockByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (UserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserResponse>> UnblockByIdAsyncWithHttpInfo (long? id, Request51 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling UsersApi->UnblockById");

            var localVarPath = "/admin/users/{id}/unblock";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnblockById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponse)));
            
        }

    }
}
