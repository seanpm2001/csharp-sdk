/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UserVoiceSdk.Client;
using UserVoiceSdk.Models;

namespace UserVoiceSdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForum_invitationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// # Create a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ForumInvitationResponse</returns>
        ForumInvitationResponse Create (Request25 request = null);

        /// <summary>
        /// # Create a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponse</returns>
        ApiResponse<ForumInvitationResponse> CreateWithHttpInfo (Request25 request = null);
        /// <summary>
        /// # Delete a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ForumInvitationResponse</returns>
        ForumInvitationResponse DeleteById (long? id, Request26 request = null);

        /// <summary>
        /// # Delete a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponse</returns>
        ApiResponse<ForumInvitationResponse> DeleteByIdWithHttpInfo (long? id, Request26 request = null);
        /// <summary>
        /// # List forum invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ForumInvitationResponsePaginated</returns>
        ForumInvitationResponsePaginated Get (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null);

        /// <summary>
        /// # List forum invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponsePaginated</returns>
        ApiResponse<ForumInvitationResponsePaginated> GetWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve forum invitations by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ForumInvitationResponse</returns>
        ForumInvitationResponse GetById (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve forum invitations by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponse</returns>
        ApiResponse<ForumInvitationResponse> GetByIdWithHttpInfo (List<int?> id, List<string> includes = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// # Create a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ForumInvitationResponse</returns>
        System.Threading.Tasks.Task<ForumInvitationResponse> CreateAsync (Request25 request = null);

        /// <summary>
        /// # Create a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponse>> CreateAsyncWithHttpInfo (Request25 request = null);
        /// <summary>
        /// # Delete a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ForumInvitationResponse</returns>
        System.Threading.Tasks.Task<ForumInvitationResponse> DeleteByIdAsync (long? id, Request26 request = null);

        /// <summary>
        /// # Delete a forum invitation
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponse>> DeleteByIdAsyncWithHttpInfo (long? id, Request26 request = null);
        /// <summary>
        /// # List forum invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ForumInvitationResponsePaginated</returns>
        System.Threading.Tasks.Task<ForumInvitationResponsePaginated> GetAsync (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null);

        /// <summary>
        /// # List forum invitations
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponsePaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve forum invitations by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ForumInvitationResponse</returns>
        System.Threading.Tasks.Task<ForumInvitationResponse> GetByIdAsync (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve forum invitations by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Forum_invitationsApi : IForum_invitationsApi
    {
        private UserVoiceSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public Forum_invitationsApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UserVoiceSdk.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UserVoiceSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// # Create a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ForumInvitationResponse</returns>
        public ForumInvitationResponse Create (Request25 request = null)
        {
             ApiResponse<ForumInvitationResponse> localVarResponse = CreateWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Create a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponse</returns>
        public ApiResponse< ForumInvitationResponse > CreateWithHttpInfo (Request25 request = null)
        {

            var localVarPath = "/admin/forum_invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponse)));
            
        }

        /// <summary>
        /// # Create a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ForumInvitationResponse</returns>
        public async System.Threading.Tasks.Task<ForumInvitationResponse> CreateAsync (Request25 request = null)
        {
             ApiResponse<ForumInvitationResponse> localVarResponse = await CreateAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Create a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponse>> CreateAsyncWithHttpInfo (Request25 request = null)
        {

            var localVarPath = "/admin/forum_invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponse)));
            
        }

        /// <summary>
        /// # Delete a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ForumInvitationResponse</returns>
        public ForumInvitationResponse DeleteById (long? id, Request26 request = null)
        {
             ApiResponse<ForumInvitationResponse> localVarResponse = DeleteByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Delete a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponse</returns>
        public ApiResponse< ForumInvitationResponse > DeleteByIdWithHttpInfo (long? id, Request26 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Forum_invitationsApi->DeleteById");

            var localVarPath = "/admin/forum_invitations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponse)));
            
        }

        /// <summary>
        /// # Delete a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ForumInvitationResponse</returns>
        public async System.Threading.Tasks.Task<ForumInvitationResponse> DeleteByIdAsync (long? id, Request26 request = null)
        {
             ApiResponse<ForumInvitationResponse> localVarResponse = await DeleteByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Delete a forum invitation 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponse>> DeleteByIdAsyncWithHttpInfo (long? id, Request26 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Forum_invitationsApi->DeleteById");

            var localVarPath = "/admin/forum_invitations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponse)));
            
        }

        /// <summary>
        /// # List forum invitations 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ForumInvitationResponsePaginated</returns>
        public ForumInvitationResponsePaginated Get (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null)
        {
             ApiResponse<ForumInvitationResponsePaginated> localVarResponse = GetWithHttpInfo(page, perPage, pageToken, sort, forum, claimed, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # List forum invitations 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponsePaginated</returns>
        public ApiResponse< ForumInvitationResponsePaginated > GetWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null)
        {

            var localVarPath = "/admin/forum_invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (pageToken != null) localVarQueryParams.Add("page_token", Configuration.ApiClient.ParameterToString(pageToken)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (forum != null) localVarQueryParams.Add("forum", Configuration.ApiClient.ParameterToString(forum)); // query parameter
            if (claimed != null) localVarQueryParams.Add("claimed", Configuration.ApiClient.ParameterToString(claimed)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponsePaginated)));
            
        }

        /// <summary>
        /// # List forum invitations 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ForumInvitationResponsePaginated</returns>
        public async System.Threading.Tasks.Task<ForumInvitationResponsePaginated> GetAsync (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null)
        {
             ApiResponse<ForumInvitationResponsePaginated> localVarResponse = await GetAsyncWithHttpInfo(page, perPage, pageToken, sort, forum, claimed, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # List forum invitations 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="claimed"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponsePaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, long? forum = null, bool? claimed = null, List<string> includes = null)
        {

            var localVarPath = "/admin/forum_invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (pageToken != null) localVarQueryParams.Add("page_token", Configuration.ApiClient.ParameterToString(pageToken)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (forum != null) localVarQueryParams.Add("forum", Configuration.ApiClient.ParameterToString(forum)); // query parameter
            if (claimed != null) localVarQueryParams.Add("claimed", Configuration.ApiClient.ParameterToString(claimed)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponsePaginated)));
            
        }

        /// <summary>
        /// # Retrieve forum invitations by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ForumInvitationResponse</returns>
        public ForumInvitationResponse GetById (List<int?> id, List<string> includes = null)
        {
             ApiResponse<ForumInvitationResponse> localVarResponse = GetByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Retrieve forum invitations by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ForumInvitationResponse</returns>
        public ApiResponse< ForumInvitationResponse > GetByIdWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Forum_invitationsApi->GetById");

            var localVarPath = "/admin/forum_invitations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponse)));
            
        }

        /// <summary>
        /// # Retrieve forum invitations by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ForumInvitationResponse</returns>
        public async System.Threading.Tasks.Task<ForumInvitationResponse> GetByIdAsync (List<int?> id, List<string> includes = null)
        {
             ApiResponse<ForumInvitationResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Retrieve forum invitations by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ForumInvitationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ForumInvitationResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling Forum_invitationsApi->GetById");

            var localVarPath = "/admin/forum_invitations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ForumInvitationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ForumInvitationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ForumInvitationResponse)));
            
        }

    }
}
