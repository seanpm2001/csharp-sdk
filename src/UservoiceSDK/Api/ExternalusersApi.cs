/* 
 * UserVoice API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UservoiceSDK.Client;
using UservoiceSDK.Models;

namespace UservoiceSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExternalusersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// # Bulk delete external users by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ExternalUserResponse</returns>
        ExternalUserResponse BulkDelete (List<int?> ids);

        /// <summary>
        /// # Bulk delete external users by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        ApiResponse<ExternalUserResponse> BulkDeleteWithHttpInfo (List<int?> ids);
        /// <summary>
        /// # Bulk delete external users by external ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>ExternalUserResponse</returns>
        ExternalUserResponse BulkDeleteByExternalId (List<string> externalIds);

        /// <summary>
        /// # Bulk delete external users by external ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        ApiResponse<ExternalUserResponse> BulkDeleteByExternalIdWithHttpInfo (List<string> externalIds);
        /// <summary>
        /// # List external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ExternalUserResponsePaginated</returns>
        ExternalUserResponsePaginated Get (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null);

        /// <summary>
        /// # List external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ExternalUserResponsePaginated</returns>
        ApiResponse<ExternalUserResponsePaginated> GetWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve external users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ExternalUserResponse</returns>
        ExternalUserResponse GetById (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve external users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        ApiResponse<ExternalUserResponse> GetByIdWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// # Import external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>ExternalUserResponse</returns>
        ExternalUserResponse Import (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null);

        /// <summary>
        /// # Import external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        ApiResponse<ExternalUserResponse> ImportWithHttpInfo (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// # Bulk delete external users by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ExternalUserResponse</returns>
        System.Threading.Tasks.Task<ExternalUserResponse> BulkDeleteAsync (List<int?> ids);

        /// <summary>
        /// # Bulk delete external users by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> BulkDeleteAsyncWithHttpInfo (List<int?> ids);
        /// <summary>
        /// # Bulk delete external users by external ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>Task of ExternalUserResponse</returns>
        System.Threading.Tasks.Task<ExternalUserResponse> BulkDeleteByExternalIdAsync (List<string> externalIds);

        /// <summary>
        /// # Bulk delete external users by external ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> BulkDeleteByExternalIdAsyncWithHttpInfo (List<string> externalIds);
        /// <summary>
        /// # List external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ExternalUserResponsePaginated</returns>
        System.Threading.Tasks.Task<ExternalUserResponsePaginated> GetAsync (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null);

        /// <summary>
        /// # List external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalUserResponsePaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalUserResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve external users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ExternalUserResponse</returns>
        System.Threading.Tasks.Task<ExternalUserResponse> GetByIdAsync (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve external users by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// # Import external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>Task of ExternalUserResponse</returns>
        System.Threading.Tasks.Task<ExternalUserResponse> ImportAsync (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null);

        /// <summary>
        /// # Import external users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> ImportAsyncWithHttpInfo (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExternalusersApi : IExternalusersApi
    {
        private UservoiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public ExternalusersApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UservoiceSDK.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UservoiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// # Bulk delete external users by ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ExternalUserResponse</returns>
        public ExternalUserResponse BulkDelete (List<int?> ids)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = BulkDeleteWithHttpInfo(ids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Bulk delete external users by ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        public ApiResponse< ExternalUserResponse > BulkDeleteWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ExternalusersApi->BulkDelete");

            var localVarPath = "/admin/external_users/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarFormParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # Bulk delete external users by ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ExternalUserResponse</returns>
        public async System.Threading.Tasks.Task<ExternalUserResponse> BulkDeleteAsync (List<int?> ids)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = await BulkDeleteAsyncWithHttpInfo(ids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Bulk delete external users by ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids"></param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> BulkDeleteAsyncWithHttpInfo (List<int?> ids)
        {
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ExternalusersApi->BulkDelete");

            var localVarPath = "/admin/external_users/bulk_delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ids != null) localVarFormParams.Add("ids", Configuration.ApiClient.ParameterToString(ids)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # Bulk delete external users by external ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>ExternalUserResponse</returns>
        public ExternalUserResponse BulkDeleteByExternalId (List<string> externalIds)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = BulkDeleteByExternalIdWithHttpInfo(externalIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Bulk delete external users by external ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        public ApiResponse< ExternalUserResponse > BulkDeleteByExternalIdWithHttpInfo (List<string> externalIds)
        {
            // verify the required parameter 'externalIds' is set
            if (externalIds == null)
                throw new ApiException(400, "Missing required parameter 'externalIds' when calling ExternalusersApi->BulkDeleteByExternalId");

            var localVarPath = "/admin/external_users/bulk_delete_by_external_id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (externalIds != null) localVarFormParams.Add("external_ids", Configuration.ApiClient.ParameterToString(externalIds)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDeleteByExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # Bulk delete external users by external ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>Task of ExternalUserResponse</returns>
        public async System.Threading.Tasks.Task<ExternalUserResponse> BulkDeleteByExternalIdAsync (List<string> externalIds)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = await BulkDeleteByExternalIdAsyncWithHttpInfo(externalIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Bulk delete external users by external ID 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="externalIds"></param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> BulkDeleteByExternalIdAsyncWithHttpInfo (List<string> externalIds)
        {
            // verify the required parameter 'externalIds' is set
            if (externalIds == null)
                throw new ApiException(400, "Missing required parameter 'externalIds' when calling ExternalusersApi->BulkDeleteByExternalId");

            var localVarPath = "/admin/external_users/bulk_delete_by_external_id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (externalIds != null) localVarFormParams.Add("external_ids", Configuration.ApiClient.ParameterToString(externalIds)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkDeleteByExternalId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # List external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ExternalUserResponsePaginated</returns>
        public ExternalUserResponsePaginated Get (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null)
        {
             ApiResponse<ExternalUserResponsePaginated> localVarResponse = GetWithHttpInfo(page, perPage, bulkPerPage, sort, externalId, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # List external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ExternalUserResponsePaginated</returns>
        public ApiResponse< ExternalUserResponsePaginated > GetWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null)
        {

            var localVarPath = "/admin/external_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (bulkPerPage != null) localVarQueryParams.Add("bulk_per_page", Configuration.ApiClient.ParameterToString(bulkPerPage)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (externalId != null) localVarQueryParams.Add("external_id", Configuration.ApiClient.ParameterToString(externalId)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponsePaginated)));
            
        }

        /// <summary>
        /// # List external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ExternalUserResponsePaginated</returns>
        public async System.Threading.Tasks.Task<ExternalUserResponsePaginated> GetAsync (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null)
        {
             ApiResponse<ExternalUserResponsePaginated> localVarResponse = await GetAsyncWithHttpInfo(page, perPage, bulkPerPage, sort, externalId, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # List external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="bulkPerPage"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="externalId"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalUserResponsePaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalUserResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, long? bulkPerPage = null, string sort = null, List<string> externalId = null, List<string> includes = null)
        {

            var localVarPath = "/admin/external_users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (bulkPerPage != null) localVarQueryParams.Add("bulk_per_page", Configuration.ApiClient.ParameterToString(bulkPerPage)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (externalId != null) localVarQueryParams.Add("external_id", Configuration.ApiClient.ParameterToString(externalId)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponsePaginated)));
            
        }

        /// <summary>
        /// # Retrieve external users by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ExternalUserResponse</returns>
        public ExternalUserResponse GetById (List<int?> id, List<string> includes = null)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = GetByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Retrieve external users by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        public ApiResponse< ExternalUserResponse > GetByIdWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalusersApi->GetById");

            var localVarPath = "/admin/external_users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # Retrieve external users by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ExternalUserResponse</returns>
        public async System.Threading.Tasks.Task<ExternalUserResponse> GetByIdAsync (List<int?> id, List<string> includes = null)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Retrieve external users by id 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExternalusersApi->GetById");

            var localVarPath = "/admin/external_users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # Import external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>ExternalUserResponse</returns>
        public ExternalUserResponse Import (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = ImportWithHttpInfo(users, usersIExternalId, usersIEmail, usersIAccountExternalId, usersIUserId, usersIName, usersIExternalCreatedAt, usersIIp, usersIType, usersILastSeenAt, usersISeenDays, usersI_, usersIAccountName, usersIAccountPlan, usersIAccountMrrCents, usersIAccountLtvCents, usersIAccountExternalCreatedAt, usersIAccount_);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Import external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>ApiResponse of ExternalUserResponse</returns>
        public ApiResponse< ExternalUserResponse > ImportWithHttpInfo (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null)
        {
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling ExternalusersApi->Import");
            // verify the required parameter 'usersIExternalId' is set
            if (usersIExternalId == null)
                throw new ApiException(400, "Missing required parameter 'usersIExternalId' when calling ExternalusersApi->Import");
            // verify the required parameter 'usersIEmail' is set
            if (usersIEmail == null)
                throw new ApiException(400, "Missing required parameter 'usersIEmail' when calling ExternalusersApi->Import");
            // verify the required parameter 'usersIAccountExternalId' is set
            if (usersIAccountExternalId == null)
                throw new ApiException(400, "Missing required parameter 'usersIAccountExternalId' when calling ExternalusersApi->Import");

            var localVarPath = "/admin/external_users/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (users != null) localVarFormParams.Add("users", Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (usersIExternalId != null) localVarFormParams.Add("users[i].external_id", Configuration.ApiClient.ParameterToString(usersIExternalId)); // form parameter
            if (usersIEmail != null) localVarFormParams.Add("users[i].email", Configuration.ApiClient.ParameterToString(usersIEmail)); // form parameter
            if (usersIUserId != null) localVarFormParams.Add("users[i].user_id", Configuration.ApiClient.ParameterToString(usersIUserId)); // form parameter
            if (usersIName != null) localVarFormParams.Add("users[i].name", Configuration.ApiClient.ParameterToString(usersIName)); // form parameter
            if (usersIExternalCreatedAt != null) localVarFormParams.Add("users[i].external_created_at", Configuration.ApiClient.ParameterToString(usersIExternalCreatedAt)); // form parameter
            if (usersIIp != null) localVarFormParams.Add("users[i].ip", Configuration.ApiClient.ParameterToString(usersIIp)); // form parameter
            if (usersIType != null) localVarFormParams.Add("users[i].type", Configuration.ApiClient.ParameterToString(usersIType)); // form parameter
            if (usersILastSeenAt != null) localVarFormParams.Add("users[i].last_seen_at", Configuration.ApiClient.ParameterToString(usersILastSeenAt)); // form parameter
            if (usersISeenDays != null) localVarFormParams.Add("users[i].seen_days", Configuration.ApiClient.ParameterToString(usersISeenDays)); // form parameter
            if (usersI_ != null) localVarFormParams.Add("users[i].*", Configuration.ApiClient.ParameterToString(usersI_)); // form parameter
            if (usersIAccountExternalId != null) localVarFormParams.Add("users[i].account.external_id", Configuration.ApiClient.ParameterToString(usersIAccountExternalId)); // form parameter
            if (usersIAccountName != null) localVarFormParams.Add("users[i].account.name", Configuration.ApiClient.ParameterToString(usersIAccountName)); // form parameter
            if (usersIAccountPlan != null) localVarFormParams.Add("users[i].account.plan", Configuration.ApiClient.ParameterToString(usersIAccountPlan)); // form parameter
            if (usersIAccountMrrCents != null) localVarFormParams.Add("users[i].account.mrr_cents", Configuration.ApiClient.ParameterToString(usersIAccountMrrCents)); // form parameter
            if (usersIAccountLtvCents != null) localVarFormParams.Add("users[i].account.ltv_cents", Configuration.ApiClient.ParameterToString(usersIAccountLtvCents)); // form parameter
            if (usersIAccountExternalCreatedAt != null) localVarFormParams.Add("users[i].account.external_created_at", Configuration.ApiClient.ParameterToString(usersIAccountExternalCreatedAt)); // form parameter
            if (usersIAccount_ != null) localVarFormParams.Add("users[i].account.*", Configuration.ApiClient.ParameterToString(usersIAccount_)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Import", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

        /// <summary>
        /// # Import external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>Task of ExternalUserResponse</returns>
        public async System.Threading.Tasks.Task<ExternalUserResponse> ImportAsync (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null)
        {
             ApiResponse<ExternalUserResponse> localVarResponse = await ImportAsyncWithHttpInfo(users, usersIExternalId, usersIEmail, usersIAccountExternalId, usersIUserId, usersIName, usersIExternalCreatedAt, usersIIp, usersIType, usersILastSeenAt, usersISeenDays, usersI_, usersIAccountName, usersIAccountPlan, usersIAccountMrrCents, usersIAccountLtvCents, usersIAccountExternalCreatedAt, usersIAccount_);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Import external users 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="users">Each element with index i has these fields:</param>
        /// <param name="usersIExternalId"></param>
        /// <param name="usersIEmail"></param>
        /// <param name="usersIAccountExternalId"></param>
        /// <param name="usersIUserId"> (optional)</param>
        /// <param name="usersIName"> (optional)</param>
        /// <param name="usersIExternalCreatedAt"> (optional)</param>
        /// <param name="usersIIp"> (optional)</param>
        /// <param name="usersIType"> (optional)</param>
        /// <param name="usersILastSeenAt"> (optional)</param>
        /// <param name="usersISeenDays"> (optional)</param>
        /// <param name="usersI_"> (optional)</param>
        /// <param name="usersIAccountName"> (optional)</param>
        /// <param name="usersIAccountPlan"> (optional)</param>
        /// <param name="usersIAccountMrrCents"> (optional)</param>
        /// <param name="usersIAccountLtvCents"> (optional)</param>
        /// <param name="usersIAccountExternalCreatedAt"> (optional)</param>
        /// <param name="usersIAccount_"> (optional)</param>
        /// <returns>Task of ApiResponse (ExternalUserResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExternalUserResponse>> ImportAsyncWithHttpInfo (List<string> users, string usersIExternalId, string usersIEmail, string usersIAccountExternalId, long? usersIUserId = null, string usersIName = null, DateTime? usersIExternalCreatedAt = null, string usersIIp = null, string usersIType = null, DateTime? usersILastSeenAt = null, long? usersISeenDays = null, string usersI_ = null, string usersIAccountName = null, string usersIAccountPlan = null, long? usersIAccountMrrCents = null, long? usersIAccountLtvCents = null, DateTime? usersIAccountExternalCreatedAt = null, string usersIAccount_ = null)
        {
            // verify the required parameter 'users' is set
            if (users == null)
                throw new ApiException(400, "Missing required parameter 'users' when calling ExternalusersApi->Import");
            // verify the required parameter 'usersIExternalId' is set
            if (usersIExternalId == null)
                throw new ApiException(400, "Missing required parameter 'usersIExternalId' when calling ExternalusersApi->Import");
            // verify the required parameter 'usersIEmail' is set
            if (usersIEmail == null)
                throw new ApiException(400, "Missing required parameter 'usersIEmail' when calling ExternalusersApi->Import");
            // verify the required parameter 'usersIAccountExternalId' is set
            if (usersIAccountExternalId == null)
                throw new ApiException(400, "Missing required parameter 'usersIAccountExternalId' when calling ExternalusersApi->Import");

            var localVarPath = "/admin/external_users/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (users != null) localVarFormParams.Add("users", Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (usersIExternalId != null) localVarFormParams.Add("users[i].external_id", Configuration.ApiClient.ParameterToString(usersIExternalId)); // form parameter
            if (usersIEmail != null) localVarFormParams.Add("users[i].email", Configuration.ApiClient.ParameterToString(usersIEmail)); // form parameter
            if (usersIUserId != null) localVarFormParams.Add("users[i].user_id", Configuration.ApiClient.ParameterToString(usersIUserId)); // form parameter
            if (usersIName != null) localVarFormParams.Add("users[i].name", Configuration.ApiClient.ParameterToString(usersIName)); // form parameter
            if (usersIExternalCreatedAt != null) localVarFormParams.Add("users[i].external_created_at", Configuration.ApiClient.ParameterToString(usersIExternalCreatedAt)); // form parameter
            if (usersIIp != null) localVarFormParams.Add("users[i].ip", Configuration.ApiClient.ParameterToString(usersIIp)); // form parameter
            if (usersIType != null) localVarFormParams.Add("users[i].type", Configuration.ApiClient.ParameterToString(usersIType)); // form parameter
            if (usersILastSeenAt != null) localVarFormParams.Add("users[i].last_seen_at", Configuration.ApiClient.ParameterToString(usersILastSeenAt)); // form parameter
            if (usersISeenDays != null) localVarFormParams.Add("users[i].seen_days", Configuration.ApiClient.ParameterToString(usersISeenDays)); // form parameter
            if (usersI_ != null) localVarFormParams.Add("users[i].*", Configuration.ApiClient.ParameterToString(usersI_)); // form parameter
            if (usersIAccountExternalId != null) localVarFormParams.Add("users[i].account.external_id", Configuration.ApiClient.ParameterToString(usersIAccountExternalId)); // form parameter
            if (usersIAccountName != null) localVarFormParams.Add("users[i].account.name", Configuration.ApiClient.ParameterToString(usersIAccountName)); // form parameter
            if (usersIAccountPlan != null) localVarFormParams.Add("users[i].account.plan", Configuration.ApiClient.ParameterToString(usersIAccountPlan)); // form parameter
            if (usersIAccountMrrCents != null) localVarFormParams.Add("users[i].account.mrr_cents", Configuration.ApiClient.ParameterToString(usersIAccountMrrCents)); // form parameter
            if (usersIAccountLtvCents != null) localVarFormParams.Add("users[i].account.ltv_cents", Configuration.ApiClient.ParameterToString(usersIAccountLtvCents)); // form parameter
            if (usersIAccountExternalCreatedAt != null) localVarFormParams.Add("users[i].account.external_created_at", Configuration.ApiClient.ParameterToString(usersIAccountExternalCreatedAt)); // form parameter
            if (usersIAccount_ != null) localVarFormParams.Add("users[i].account.*", Configuration.ApiClient.ParameterToString(usersIAccount_)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Import", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExternalUserResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExternalUserResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExternalUserResponse)));
            
        }

    }
}
