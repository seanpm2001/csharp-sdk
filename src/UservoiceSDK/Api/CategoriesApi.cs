/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UserVoiceSdk.Client;
using UserVoiceSdk.Models;

namespace UserVoiceSdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICategoriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// # Create a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse Create (string name, long? linksForum, List<string> includes = null);

        /// <summary>
        /// # Create a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> CreateWithHttpInfo (string name, long? linksForum, List<string> includes = null);
        /// <summary>
        /// # Delete a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse DeleteById (long? id, List<string> includes = null);

        /// <summary>
        /// # Delete a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> DeleteByIdWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// # List categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponsePaginated</returns>
        CategoryResponsePaginated Get (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null);

        /// <summary>
        /// # List categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponsePaginated</returns>
        ApiResponse<CategoryResponsePaginated> GetWithHttpInfo (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve categories by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse GetById (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve categories by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> GetByIdWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// # Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse UpdateById (long? id, string name = null, long? linksForum = null, List<string> includes = null);

        /// <summary>
        /// # Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> UpdateByIdWithHttpInfo (long? id, string name = null, long? linksForum = null, List<string> includes = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// # Create a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> CreateAsync (string name, long? linksForum, List<string> includes = null);

        /// <summary>
        /// # Create a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> CreateAsyncWithHttpInfo (string name, long? linksForum, List<string> includes = null);
        /// <summary>
        /// # Delete a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> DeleteByIdAsync (long? id, List<string> includes = null);

        /// <summary>
        /// # Delete a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> DeleteByIdAsyncWithHttpInfo (long? id, List<string> includes = null);
        /// <summary>
        /// # List categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponsePaginated</returns>
        System.Threading.Tasks.Task<CategoryResponsePaginated> GetAsync (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null);

        /// <summary>
        /// # List categories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponsePaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve categories by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetByIdAsync (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve categories by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// # Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> UpdateByIdAsync (long? id, string name = null, long? linksForum = null, List<string> includes = null);

        /// <summary>
        /// # Update a category
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> UpdateByIdAsyncWithHttpInfo (long? id, string name = null, long? linksForum = null, List<string> includes = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CategoriesApi : ICategoriesApi
    {
        private UserVoiceSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public CategoriesApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UserVoiceSdk.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UserVoiceSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// # Create a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse Create (string name, long? linksForum, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = CreateWithHttpInfo(name, linksForum, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Create a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public ApiResponse< CategoryResponse > CreateWithHttpInfo (string name, long? linksForum, List<string> includes = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CategoriesApi->Create");
            // verify the required parameter 'linksForum' is set
            if (linksForum == null)
                throw new ApiException(400, "Missing required parameter 'linksForum' when calling CategoriesApi->Create");

            var localVarPath = "/admin/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (linksForum != null) localVarFormParams.Add("links.forum", Configuration.ApiClient.ParameterToString(linksForum)); // form parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # Create a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> CreateAsync (string name, long? linksForum, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = await CreateAsyncWithHttpInfo(name, linksForum, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Create a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="linksForum"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> CreateAsyncWithHttpInfo (string name, long? linksForum, List<string> includes = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling CategoriesApi->Create");
            // verify the required parameter 'linksForum' is set
            if (linksForum == null)
                throw new ApiException(400, "Missing required parameter 'linksForum' when calling CategoriesApi->Create");

            var localVarPath = "/admin/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (linksForum != null) localVarFormParams.Add("links.forum", Configuration.ApiClient.ParameterToString(linksForum)); // form parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # Delete a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse DeleteById (long? id, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = DeleteByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Delete a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public ApiResponse< CategoryResponse > DeleteByIdWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->DeleteById");

            var localVarPath = "/admin/categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # Delete a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> DeleteByIdAsync (long? id, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = await DeleteByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Delete a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> DeleteByIdAsyncWithHttpInfo (long? id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->DeleteById");

            var localVarPath = "/admin/categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # List categories 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponsePaginated</returns>
        public CategoryResponsePaginated Get (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null)
        {
             ApiResponse<CategoryResponsePaginated> localVarResponse = GetWithHttpInfo(page, perPage, sort, forum, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # List categories 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponsePaginated</returns>
        public ApiResponse< CategoryResponsePaginated > GetWithHttpInfo (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null)
        {

            var localVarPath = "/admin/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (forum != null) localVarQueryParams.Add("forum", Configuration.ApiClient.ParameterToString(forum)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponsePaginated)));
            
        }

        /// <summary>
        /// # List categories 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponsePaginated</returns>
        public async System.Threading.Tasks.Task<CategoryResponsePaginated> GetAsync (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null)
        {
             ApiResponse<CategoryResponsePaginated> localVarResponse = await GetAsyncWithHttpInfo(page, perPage, sort, forum, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # List categories 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponsePaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string sort = null, List<int?> forum = null, List<string> includes = null)
        {

            var localVarPath = "/admin/categories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (forum != null) localVarQueryParams.Add("forum", Configuration.ApiClient.ParameterToString(forum)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponsePaginated)));
            
        }

        /// <summary>
        /// # Retrieve categories by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse GetById (List<int?> id, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = GetByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Retrieve categories by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public ApiResponse< CategoryResponse > GetByIdWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->GetById");

            var localVarPath = "/admin/categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # Retrieve categories by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetByIdAsync (List<int?> id, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Retrieve categories by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->GetById");

            var localVarPath = "/admin/categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # Update a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse UpdateById (long? id, string name = null, long? linksForum = null, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = UpdateByIdWithHttpInfo(id, name, linksForum, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Update a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public ApiResponse< CategoryResponse > UpdateByIdWithHttpInfo (long? id, string name = null, long? linksForum = null, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->UpdateById");

            var localVarPath = "/admin/categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (linksForum != null) localVarFormParams.Add("links.forum", Configuration.ApiClient.ParameterToString(linksForum)); // form parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

        /// <summary>
        /// # Update a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> UpdateByIdAsync (long? id, string name = null, long? linksForum = null, List<string> includes = null)
        {
             ApiResponse<CategoryResponse> localVarResponse = await UpdateByIdAsyncWithHttpInfo(id, name, linksForum, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Update a category 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="linksForum"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> UpdateByIdAsyncWithHttpInfo (long? id, string name = null, long? linksForum = null, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CategoriesApi->UpdateById");

            var localVarPath = "/admin/categories/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (linksForum != null) localVarFormParams.Add("links.forum", Configuration.ApiClient.ParameterToString(linksForum)); // form parameter
            if (includes != null) localVarFormParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CategoryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CategoryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CategoryResponse)));
            
        }

    }
}
