/* 
 * UserVoice API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UservoiceSDK.Client;

namespace UservoiceSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentityApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// # Add or update traits for a batch of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns></returns>
        void BulkIdentify (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null);

        /// <summary>
        /// # Add or update traits for a batch of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BulkIdentifyWithHttpInfo (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// # Add or update traits for a batch of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BulkIdentifyAsync (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null);

        /// <summary>
        /// # Add or update traits for a batch of users.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BulkIdentifyAsyncWithHttpInfo (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentityApi : IIdentityApi
    {
        private UservoiceSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public IdentityApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UservoiceSDK.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UservoiceSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// # Add or update traits for a batch of users. 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns></returns>
        public void BulkIdentify (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null)
        {
             BulkIdentifyWithHttpInfo(identities, identitiesIId, identitiesIEmail, identitiesIName, identitiesICreatedAt, identitiesIType, identitiesIAccountId, identitiesIAccountName, identitiesIAccountCreatedAt, identitiesIAccountMonthlyRate, identitiesIAccountLtv, identitiesIAccountPlan);
        }

        /// <summary>
        /// # Add or update traits for a batch of users. 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BulkIdentifyWithHttpInfo (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null)
        {
            // verify the required parameter 'identities' is set
            if (identities == null)
                throw new ApiException(400, "Missing required parameter 'identities' when calling IdentityApi->BulkIdentify");

            var localVarPath = "/admin/bulk_identify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (identities != null) localVarFormParams.Add("identities", Configuration.ApiClient.ParameterToString(identities)); // form parameter
            if (identitiesIId != null) localVarFormParams.Add("identities[i].id", Configuration.ApiClient.ParameterToString(identitiesIId)); // form parameter
            if (identitiesIEmail != null) localVarFormParams.Add("identities[i].email", Configuration.ApiClient.ParameterToString(identitiesIEmail)); // form parameter
            if (identitiesIName != null) localVarFormParams.Add("identities[i].name", Configuration.ApiClient.ParameterToString(identitiesIName)); // form parameter
            if (identitiesICreatedAt != null) localVarFormParams.Add("identities[i].created_at", Configuration.ApiClient.ParameterToString(identitiesICreatedAt)); // form parameter
            if (identitiesIType != null) localVarFormParams.Add("identities[i].type", Configuration.ApiClient.ParameterToString(identitiesIType)); // form parameter
            if (identitiesIAccountId != null) localVarFormParams.Add("identities[i].account.id", Configuration.ApiClient.ParameterToString(identitiesIAccountId)); // form parameter
            if (identitiesIAccountName != null) localVarFormParams.Add("identities[i].account.name", Configuration.ApiClient.ParameterToString(identitiesIAccountName)); // form parameter
            if (identitiesIAccountCreatedAt != null) localVarFormParams.Add("identities[i].account.created_at", Configuration.ApiClient.ParameterToString(identitiesIAccountCreatedAt)); // form parameter
            if (identitiesIAccountMonthlyRate != null) localVarFormParams.Add("identities[i].account.monthly_rate", Configuration.ApiClient.ParameterToString(identitiesIAccountMonthlyRate)); // form parameter
            if (identitiesIAccountLtv != null) localVarFormParams.Add("identities[i].account.ltv", Configuration.ApiClient.ParameterToString(identitiesIAccountLtv)); // form parameter
            if (identitiesIAccountPlan != null) localVarFormParams.Add("identities[i].account.plan", Configuration.ApiClient.ParameterToString(identitiesIAccountPlan)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkIdentify", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// # Add or update traits for a batch of users. 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BulkIdentifyAsync (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null)
        {
             await BulkIdentifyAsyncWithHttpInfo(identities, identitiesIId, identitiesIEmail, identitiesIName, identitiesICreatedAt, identitiesIType, identitiesIAccountId, identitiesIAccountName, identitiesIAccountCreatedAt, identitiesIAccountMonthlyRate, identitiesIAccountLtv, identitiesIAccountPlan);

        }

        /// <summary>
        /// # Add or update traits for a batch of users. 
        /// </summary>
        /// <exception cref="UservoiceSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identities">Each element with index i has these fields:</param>
        /// <param name="identitiesIId">external identifier for this user (optional)</param>
        /// <param name="identitiesIEmail">required to match a user in the UserVoice database (optional)</param>
        /// <param name="identitiesIName">user’s real name (optional)</param>
        /// <param name="identitiesICreatedAt">unix timestamp for the date the user signed up (optional)</param>
        /// <param name="identitiesIType">used for segmenting users by type (optional)</param>
        /// <param name="identitiesIAccountId">external identifier for this user’s account (optional)</param>
        /// <param name="identitiesIAccountName">account name (optional)</param>
        /// <param name="identitiesIAccountCreatedAt">unix timestamp for the date the account was created (optional)</param>
        /// <param name="identitiesIAccountMonthlyRate">decimal; monthly rate of the account (optional)</param>
        /// <param name="identitiesIAccountLtv">decimal; lifetime value of the account (optional)</param>
        /// <param name="identitiesIAccountPlan">plan name for the account (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BulkIdentifyAsyncWithHttpInfo (List<string> identities, string identitiesIId = null, string identitiesIEmail = null, string identitiesIName = null, long? identitiesICreatedAt = null, string identitiesIType = null, string identitiesIAccountId = null, string identitiesIAccountName = null, long? identitiesIAccountCreatedAt = null, double? identitiesIAccountMonthlyRate = null, double? identitiesIAccountLtv = null, string identitiesIAccountPlan = null)
        {
            // verify the required parameter 'identities' is set
            if (identities == null)
                throw new ApiException(400, "Missing required parameter 'identities' when calling IdentityApi->BulkIdentify");

            var localVarPath = "/admin/bulk_identify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (identities != null) localVarFormParams.Add("identities", Configuration.ApiClient.ParameterToString(identities)); // form parameter
            if (identitiesIId != null) localVarFormParams.Add("identities[i].id", Configuration.ApiClient.ParameterToString(identitiesIId)); // form parameter
            if (identitiesIEmail != null) localVarFormParams.Add("identities[i].email", Configuration.ApiClient.ParameterToString(identitiesIEmail)); // form parameter
            if (identitiesIName != null) localVarFormParams.Add("identities[i].name", Configuration.ApiClient.ParameterToString(identitiesIName)); // form parameter
            if (identitiesICreatedAt != null) localVarFormParams.Add("identities[i].created_at", Configuration.ApiClient.ParameterToString(identitiesICreatedAt)); // form parameter
            if (identitiesIType != null) localVarFormParams.Add("identities[i].type", Configuration.ApiClient.ParameterToString(identitiesIType)); // form parameter
            if (identitiesIAccountId != null) localVarFormParams.Add("identities[i].account.id", Configuration.ApiClient.ParameterToString(identitiesIAccountId)); // form parameter
            if (identitiesIAccountName != null) localVarFormParams.Add("identities[i].account.name", Configuration.ApiClient.ParameterToString(identitiesIAccountName)); // form parameter
            if (identitiesIAccountCreatedAt != null) localVarFormParams.Add("identities[i].account.created_at", Configuration.ApiClient.ParameterToString(identitiesIAccountCreatedAt)); // form parameter
            if (identitiesIAccountMonthlyRate != null) localVarFormParams.Add("identities[i].account.monthly_rate", Configuration.ApiClient.ParameterToString(identitiesIAccountMonthlyRate)); // form parameter
            if (identitiesIAccountLtv != null) localVarFormParams.Add("identities[i].account.ltv", Configuration.ApiClient.ParameterToString(identitiesIAccountLtv)); // form parameter
            if (identitiesIAccountPlan != null) localVarFormParams.Add("identities[i].account.plan", Configuration.ApiClient.ParameterToString(identitiesIAccountPlan)); // form parameter

            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkIdentify", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
