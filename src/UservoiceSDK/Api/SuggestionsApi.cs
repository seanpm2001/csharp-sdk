/* 
 * UserVoice API
 *
 * A RESTful API to interface with UserVoice's feedback system. Online documentation available here: https://developer.uservoice.com/docs/api/v2/reference/.
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UserVoiceSdk.Client;
using UserVoiceSdk.Models;

namespace UserVoiceSdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISuggestionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse ApproveById (long? id, Request44 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> ApproveByIdWithHttpInfo (long? id, Request44 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse ConvertToTicketById (long? id, Request45 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> ConvertToTicketByIdWithHttpInfo (long? id, Request45 request = null);
        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse Create (Request40 request = null);

        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> CreateWithHttpInfo (Request40 request = null);
        /// <summary>
        /// # Delete a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse DeleteById (long? id, Request43 request = null);

        /// <summary>
        /// # Delete a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> DeleteByIdWithHttpInfo (long? id, Request43 request = null);
        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>SuggestionResponsePaginated</returns>
        SuggestionResponsePaginated Get (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null);

        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of SuggestionResponsePaginated</returns>
        ApiResponse<SuggestionResponsePaginated> GetWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve suggestions by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse GetById (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve suggestions by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> GetByIdWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse Import (Request41 request = null);

        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> ImportWithHttpInfo (Request41 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse PublishById (long? id, Request46 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> PublishByIdWithHttpInfo (long? id, Request46 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse SpamById (long? id, Request47 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> SpamByIdWithHttpInfo (long? id, Request47 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse UnremoveById (long? id, Request48 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> UnremoveByIdWithHttpInfo (long? id, Request48 request = null);
        /// <summary>
        /// # Update a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        SuggestionResponse UpdateById (long? id, Request42 request = null);

        /// <summary>
        /// # Update a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        ApiResponse<SuggestionResponse> UpdateByIdWithHttpInfo (long? id, Request42 request = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> ApproveByIdAsync (long? id, Request44 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> ApproveByIdAsyncWithHttpInfo (long? id, Request44 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> ConvertToTicketByIdAsync (long? id, Request45 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> ConvertToTicketByIdAsyncWithHttpInfo (long? id, Request45 request = null);
        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> CreateAsync (Request40 request = null);

        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> CreateAsyncWithHttpInfo (Request40 request = null);
        /// <summary>
        /// # Delete a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> DeleteByIdAsync (long? id, Request43 request = null);

        /// <summary>
        /// # Delete a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> DeleteByIdAsyncWithHttpInfo (long? id, Request43 request = null);
        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of SuggestionResponsePaginated</returns>
        System.Threading.Tasks.Task<SuggestionResponsePaginated> GetAsync (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null);

        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponsePaginated)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null);
        /// <summary>
        /// # Retrieve suggestions by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> GetByIdAsync (List<int?> id, List<string> includes = null);

        /// <summary>
        /// # Retrieve suggestions by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null);
        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> ImportAsync (Request41 request = null);

        /// <summary>
        /// # Create a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> ImportAsyncWithHttpInfo (Request41 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> PublishByIdAsync (long? id, Request46 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> PublishByIdAsyncWithHttpInfo (long? id, Request46 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> SpamByIdAsync (long? id, Request47 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> SpamByIdAsyncWithHttpInfo (long? id, Request47 request = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> UnremoveByIdAsync (long? id, Request48 request = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> UnremoveByIdAsyncWithHttpInfo (long? id, Request48 request = null);
        /// <summary>
        /// # Update a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        System.Threading.Tasks.Task<SuggestionResponse> UpdateByIdAsync (long? id, Request42 request = null);

        /// <summary>
        /// # Update a suggestion
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> UpdateByIdAsyncWithHttpInfo (long? id, Request42 request = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SuggestionsApi : ISuggestionsApi
    {
        private UserVoiceSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        public SuggestionsApi(ApiClient client) 
		{ 
			this.Client = client;

			ExceptionFactory = UserVoiceSdk.Client.Configuration.DefaultExceptionFactory;

			// ensure API client has configuration ready
			if (Configuration.ApiClient.Configuration == null)
			{
				this.Configuration.ApiClient.Configuration = this.Configuration;
			}
		}

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the ApiClient object
        /// </summary>
        /// <value>An instance of the ApiClient</value>
        public ApiClient Client {get; set;}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get { return Client.Configuration; }}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UserVoiceSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse ApproveById (long? id, Request44 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = ApproveByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > ApproveByIdWithHttpInfo (long? id, Request44 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->ApproveById");

            var localVarPath = "/admin/suggestions/{id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> ApproveByIdAsync (long? id, Request44 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await ApproveByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> ApproveByIdAsyncWithHttpInfo (long? id, Request44 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->ApproveById");

            var localVarPath = "/admin/suggestions/{id}/approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApproveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse ConvertToTicketById (long? id, Request45 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = ConvertToTicketByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > ConvertToTicketByIdWithHttpInfo (long? id, Request45 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->ConvertToTicketById");

            var localVarPath = "/admin/suggestions/{id}/convert_to_ticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertToTicketById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> ConvertToTicketByIdAsync (long? id, Request45 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await ConvertToTicketByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> ConvertToTicketByIdAsyncWithHttpInfo (long? id, Request45 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->ConvertToTicketById");

            var localVarPath = "/admin/suggestions/{id}/convert_to_ticket";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConvertToTicketById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse Create (Request40 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = CreateWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > CreateWithHttpInfo (Request40 request = null)
        {

            var localVarPath = "/admin/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> CreateAsync (Request40 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await CreateAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> CreateAsyncWithHttpInfo (Request40 request = null)
        {

            var localVarPath = "/admin/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Delete a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse DeleteById (long? id, Request43 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = DeleteByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Delete a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > DeleteByIdWithHttpInfo (long? id, Request43 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->DeleteById");

            var localVarPath = "/admin/suggestions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Delete a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> DeleteByIdAsync (long? id, Request43 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await DeleteByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Delete a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> DeleteByIdAsyncWithHttpInfo (long? id, Request43 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->DeleteById");

            var localVarPath = "/admin/suggestions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions. 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>SuggestionResponsePaginated</returns>
        public SuggestionResponsePaginated Get (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null)
        {
             ApiResponse<SuggestionResponsePaginated> localVarResponse = GetWithHttpInfo(page, perPage, pageToken, sort, forum, creator, uncategorizedInForum, categoryNone, category, statusNone, status, state, label, supporter, externalAccount, feature, hasResponse, hasSmartvoteScore, noEngagementSince, engagementSince, periodStart, periodEnd, q, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions. 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of SuggestionResponsePaginated</returns>
        public ApiResponse< SuggestionResponsePaginated > GetWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null)
        {

            var localVarPath = "/admin/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (pageToken != null) localVarQueryParams.Add("page_token", Configuration.ApiClient.ParameterToString(pageToken)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (forum != null) localVarQueryParams.Add("forum", Configuration.ApiClient.ParameterToString(forum)); // query parameter
            if (creator != null) localVarQueryParams.Add("creator", Configuration.ApiClient.ParameterToString(creator)); // query parameter
            if (uncategorizedInForum != null) localVarQueryParams.Add("uncategorized_in_forum", Configuration.ApiClient.ParameterToString(uncategorizedInForum)); // query parameter
            if (categoryNone != null) localVarQueryParams.Add("category_none", Configuration.ApiClient.ParameterToString(categoryNone)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (statusNone != null) localVarQueryParams.Add("status_none", Configuration.ApiClient.ParameterToString(statusNone)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (supporter != null) localVarQueryParams.Add("supporter", Configuration.ApiClient.ParameterToString(supporter)); // query parameter
            if (externalAccount != null) localVarQueryParams.Add("external_account", Configuration.ApiClient.ParameterToString(externalAccount)); // query parameter
            if (feature != null) localVarQueryParams.Add("feature", Configuration.ApiClient.ParameterToString(feature)); // query parameter
            if (hasResponse != null) localVarQueryParams.Add("has_response", Configuration.ApiClient.ParameterToString(hasResponse)); // query parameter
            if (hasSmartvoteScore != null) localVarQueryParams.Add("has_smartvote_score", Configuration.ApiClient.ParameterToString(hasSmartvoteScore)); // query parameter
            if (noEngagementSince != null) localVarQueryParams.Add("no_engagement_since", Configuration.ApiClient.ParameterToString(noEngagementSince)); // query parameter
            if (engagementSince != null) localVarQueryParams.Add("engagement_since", Configuration.ApiClient.ParameterToString(engagementSince)); // query parameter
            if (periodStart != null) localVarQueryParams.Add("period_start", Configuration.ApiClient.ParameterToString(periodStart)); // query parameter
            if (periodEnd != null) localVarQueryParams.Add("period_end", Configuration.ApiClient.ParameterToString(periodEnd)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponsePaginated)));
            
        }

        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions. 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of SuggestionResponsePaginated</returns>
        public async System.Threading.Tasks.Task<SuggestionResponsePaginated> GetAsync (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null)
        {
             ApiResponse<SuggestionResponsePaginated> localVarResponse = await GetAsyncWithHttpInfo(page, perPage, pageToken, sort, forum, creator, uncategorizedInForum, categoryNone, category, statusNone, status, state, label, supporter, externalAccount, feature, hasResponse, hasSmartvoteScore, noEngagementSince, engagementSince, periodStart, periodEnd, q, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # List suggestions  Returns a paginated list of suggestions. 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="perPage"> (optional, default to 20)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="sort"> (optional, default to -id)</param>
        /// <param name="forum"> (optional)</param>
        /// <param name="creator"> (optional)</param>
        /// <param name="uncategorizedInForum"> (optional)</param>
        /// <param name="categoryNone"> (optional)</param>
        /// <param name="category"> (optional)</param>
        /// <param name="statusNone"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="label"> (optional)</param>
        /// <param name="supporter"> (optional)</param>
        /// <param name="externalAccount"> (optional)</param>
        /// <param name="feature"> (optional)</param>
        /// <param name="hasResponse"> (optional)</param>
        /// <param name="hasSmartvoteScore"> (optional)</param>
        /// <param name="noEngagementSince"> (optional)</param>
        /// <param name="engagementSince"> (optional)</param>
        /// <param name="periodStart"> (optional)</param>
        /// <param name="periodEnd"> (optional)</param>
        /// <param name="q"> (optional)</param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponsePaginated)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponsePaginated>> GetAsyncWithHttpInfo (long? page = null, long? perPage = null, string pageToken = null, string sort = null, List<int?> forum = null, List<int?> creator = null, List<int?> uncategorizedInForum = null, bool? categoryNone = null, List<int?> category = null, bool? statusNone = null, List<int?> status = null, List<string> state = null, List<int?> label = null, List<int?> supporter = null, List<int?> externalAccount = null, List<int?> feature = null, bool? hasResponse = null, bool? hasSmartvoteScore = null, DateTime? noEngagementSince = null, DateTime? engagementSince = null, DateTime? periodStart = null, DateTime? periodEnd = null, string q = null, List<string> includes = null)
        {

            var localVarPath = "/admin/suggestions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (perPage != null) localVarQueryParams.Add("per_page", Configuration.ApiClient.ParameterToString(perPage)); // query parameter
            if (pageToken != null) localVarQueryParams.Add("page_token", Configuration.ApiClient.ParameterToString(pageToken)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (forum != null) localVarQueryParams.Add("forum", Configuration.ApiClient.ParameterToString(forum)); // query parameter
            if (creator != null) localVarQueryParams.Add("creator", Configuration.ApiClient.ParameterToString(creator)); // query parameter
            if (uncategorizedInForum != null) localVarQueryParams.Add("uncategorized_in_forum", Configuration.ApiClient.ParameterToString(uncategorizedInForum)); // query parameter
            if (categoryNone != null) localVarQueryParams.Add("category_none", Configuration.ApiClient.ParameterToString(categoryNone)); // query parameter
            if (category != null) localVarQueryParams.Add("category", Configuration.ApiClient.ParameterToString(category)); // query parameter
            if (statusNone != null) localVarQueryParams.Add("status_none", Configuration.ApiClient.ParameterToString(statusNone)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (state != null) localVarQueryParams.Add("state", Configuration.ApiClient.ParameterToString(state)); // query parameter
            if (label != null) localVarQueryParams.Add("label", Configuration.ApiClient.ParameterToString(label)); // query parameter
            if (supporter != null) localVarQueryParams.Add("supporter", Configuration.ApiClient.ParameterToString(supporter)); // query parameter
            if (externalAccount != null) localVarQueryParams.Add("external_account", Configuration.ApiClient.ParameterToString(externalAccount)); // query parameter
            if (feature != null) localVarQueryParams.Add("feature", Configuration.ApiClient.ParameterToString(feature)); // query parameter
            if (hasResponse != null) localVarQueryParams.Add("has_response", Configuration.ApiClient.ParameterToString(hasResponse)); // query parameter
            if (hasSmartvoteScore != null) localVarQueryParams.Add("has_smartvote_score", Configuration.ApiClient.ParameterToString(hasSmartvoteScore)); // query parameter
            if (noEngagementSince != null) localVarQueryParams.Add("no_engagement_since", Configuration.ApiClient.ParameterToString(noEngagementSince)); // query parameter
            if (engagementSince != null) localVarQueryParams.Add("engagement_since", Configuration.ApiClient.ParameterToString(engagementSince)); // query parameter
            if (periodStart != null) localVarQueryParams.Add("period_start", Configuration.ApiClient.ParameterToString(periodStart)); // query parameter
            if (periodEnd != null) localVarQueryParams.Add("period_end", Configuration.ApiClient.ParameterToString(periodEnd)); // query parameter
            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponsePaginated>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponsePaginated) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponsePaginated)));
            
        }

        /// <summary>
        /// # Retrieve suggestions by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse GetById (List<int?> id, List<string> includes = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = GetByIdWithHttpInfo(id, includes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Retrieve suggestions by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > GetByIdWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->GetById");

            var localVarPath = "/admin/suggestions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Retrieve suggestions by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> GetByIdAsync (List<int?> id, List<string> includes = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await GetByIdAsyncWithHttpInfo(id, includes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Retrieve suggestions by id 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="includes"> (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> GetByIdAsyncWithHttpInfo (List<int?> id, List<string> includes = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->GetById");

            var localVarPath = "/admin/suggestions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includes != null) localVarQueryParams.Add("includes", Configuration.ApiClient.ParameterToString(includes)); // query parameter

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse Import (Request41 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = ImportWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > ImportWithHttpInfo (Request41 request = null)
        {

            var localVarPath = "/admin/suggestions/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Import", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> ImportAsync (Request41 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await ImportAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Create a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> ImportAsyncWithHttpInfo (Request41 request = null)
        {

            var localVarPath = "/admin/suggestions/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Import", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse PublishById (long? id, Request46 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = PublishByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > PublishByIdWithHttpInfo (long? id, Request46 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->PublishById");

            var localVarPath = "/admin/suggestions/{id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> PublishByIdAsync (long? id, Request46 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await PublishByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> PublishByIdAsyncWithHttpInfo (long? id, Request46 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->PublishById");

            var localVarPath = "/admin/suggestions/{id}/publish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PublishById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse SpamById (long? id, Request47 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = SpamByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > SpamByIdWithHttpInfo (long? id, Request47 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->SpamById");

            var localVarPath = "/admin/suggestions/{id}/spam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> SpamByIdAsync (long? id, Request47 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await SpamByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> SpamByIdAsyncWithHttpInfo (long? id, Request47 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->SpamById");

            var localVarPath = "/admin/suggestions/{id}/spam";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpamById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse UnremoveById (long? id, Request48 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = UnremoveByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > UnremoveByIdWithHttpInfo (long? id, Request48 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->UnremoveById");

            var localVarPath = "/admin/suggestions/{id}/unremove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnremoveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> UnremoveByIdAsync (long? id, Request48 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await UnremoveByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> UnremoveByIdAsyncWithHttpInfo (long? id, Request48 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->UnremoveById");

            var localVarPath = "/admin/suggestions/{id}/unremove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnremoveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Update a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>SuggestionResponse</returns>
        public SuggestionResponse UpdateById (long? id, Request42 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = UpdateByIdWithHttpInfo(id, request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// # Update a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>ApiResponse of SuggestionResponse</returns>
        public ApiResponse< SuggestionResponse > UpdateByIdWithHttpInfo (long? id, Request42 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->UpdateById");

            var localVarPath = "/admin/suggestions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

        /// <summary>
        /// # Update a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of SuggestionResponse</returns>
        public async System.Threading.Tasks.Task<SuggestionResponse> UpdateByIdAsync (long? id, Request42 request = null)
        {
             ApiResponse<SuggestionResponse> localVarResponse = await UpdateByIdAsyncWithHttpInfo(id, request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// # Update a suggestion 
        /// </summary>
        /// <exception cref="UserVoiceSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="request">Payload for this request (optional)</param>
        /// <returns>Task of ApiResponse (SuggestionResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuggestionResponse>> UpdateByIdAsyncWithHttpInfo (long? id, Request42 request = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SuggestionsApi->UpdateById");

            var localVarPath = "/admin/suggestions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (oauth2_client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }
            // authentication (oauth2_password) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuggestionResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuggestionResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuggestionResponse)));
            
        }

    }
}
