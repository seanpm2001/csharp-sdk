/* 
 * UserVoice API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using UservoiceSDK.Client;
using UservoiceSDK.Api;
using UservoiceSDK.Models;

namespace UservoiceSDK.Test
{
    /// <summary>
    ///  Class for testing ExternalusersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ExternalusersApiTests
    {
        private ExternalusersApi instance;
        private ApiClient client;
        private string subdomain = ""; // TODO
        private string clientId = ""; // TODO
        private string clientSecret = ""; // TODO

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            client = new ApiClient(subdomain, clientId, clientSecret: clientSecret);
            instance = client.Externalusers;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExternalusersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ExternalusersApi
            //Assert.IsInstanceOfType(typeof(ExternalusersApi), instance, "instance is a ExternalusersApi");
        }

        
        /// <summary>
        /// Test BulkDelete
        /// </summary>
        [Test]
        public void BulkDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> ids = null;
            //var response = instance.BulkDelete(ids);
            //Assert.IsInstanceOf<ExternalUserResponse> (response, "response is ExternalUserResponse");
        }
        
        /// <summary>
        /// Test BulkDeleteByExternalId
        /// </summary>
        [Test]
        public void BulkDeleteByExternalIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> externalIds = null;
            //var response = instance.BulkDeleteByExternalId(externalIds);
            //Assert.IsInstanceOf<ExternalUserResponse> (response, "response is ExternalUserResponse");
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? page = null;
            //long? perPage = null;
            //long? bulkPerPage = null;
            //string sort = null;
            //List<string> externalId = null;
            //List<string> includes = null;
            //var response = instance.Get(page, perPage, bulkPerPage, sort, externalId, includes);
            //Assert.IsInstanceOf<ExternalUserResponsePaginated> (response, "response is ExternalUserResponsePaginated");
        }
        
        /// <summary>
        /// Test GetById
        /// </summary>
        [Test]
        public void GetByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<int?> id = null;
            //List<string> includes = null;
            //var response = instance.GetById(id, includes);
            //Assert.IsInstanceOf<ExternalUserResponse> (response, "response is ExternalUserResponse");
        }
        
        /// <summary>
        /// Test Import
        /// </summary>
        [Test]
        public void ImportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> users = null;
            //string usersIExternalId = null;
            //string usersIEmail = null;
            //string usersIAccountExternalId = null;
            //long? usersIUserId = null;
            //string usersIName = null;
            //DateTime? usersIExternalCreatedAt = null;
            //string usersIIp = null;
            //string usersIType = null;
            //DateTime? usersILastSeenAt = null;
            //long? usersISeenDays = null;
            //string usersI_ = null;
            //string usersIAccountName = null;
            //string usersIAccountPlan = null;
            //long? usersIAccountMrrCents = null;
            //long? usersIAccountLtvCents = null;
            //DateTime? usersIAccountExternalCreatedAt = null;
            //string usersIAccount_ = null;
            //var response = instance.Import(users, usersIExternalId, usersIEmail, usersIAccountExternalId, usersIUserId, usersIName, usersIExternalCreatedAt, usersIIp, usersIType, usersILastSeenAt, usersISeenDays, usersI_, usersIAccountName, usersIAccountPlan, usersIAccountMrrCents, usersIAccountLtvCents, usersIAccountExternalCreatedAt, usersIAccount_);
            //Assert.IsInstanceOf<ExternalUserResponse> (response, "response is ExternalUserResponse");
        }
        
    }

}
